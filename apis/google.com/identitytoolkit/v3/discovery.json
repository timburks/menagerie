{
  "resources": {
    "relyingparty": {
      "methods": {
        "getOobConfirmationCode": {
          "id": "identitytoolkit.relyingparty.getOobConfirmationCode",
          "request": {
            "$ref": "Relyingparty"
          },
          "response": {
            "$ref": "GetOobConfirmationCodeResponse"
          },
          "description": "Get a code for user action confirmation.",
          "path": "getOobConfirmationCode",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST"
        },
        "signupNewUser": {
          "id": "identitytoolkit.relyingparty.signupNewUser",
          "description": "Signup new user.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "response": {
            "$ref": "SignupNewUserResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySignupNewUserRequest"
          },
          "path": "signupNewUser"
        },
        "getAccountInfo": {
          "response": {
            "$ref": "GetAccountInfoResponse"
          },
          "description": "Returns the account info.",
          "path": "getAccountInfo",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyGetAccountInfoRequest"
          },
          "httpMethod": "POST",
          "id": "identitytoolkit.relyingparty.getAccountInfo",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "signOutUser": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Sign out user.",
          "id": "identitytoolkit.relyingparty.signOutUser",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySignOutUserResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySignOutUserRequest"
          },
          "httpMethod": "POST",
          "path": "signOutUser"
        },
        "uploadAccount": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "httpMethod": "POST",
          "description": "Batch upload existing user accounts.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyUploadAccountRequest"
          },
          "response": {
            "$ref": "UploadAccountResponse"
          },
          "id": "identitytoolkit.relyingparty.uploadAccount",
          "path": "uploadAccount"
        },
        "setProjectConfig": {
          "path": "setProjectConfig",
          "id": "identitytoolkit.relyingparty.setProjectConfig",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySetProjectConfigRequest"
          },
          "description": "Set project configuration.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySetProjectConfigResponse"
          }
        },
        "verifyPassword": {
          "description": "Verifies the user entered password.",
          "path": "verifyPassword",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPasswordRequest"
          },
          "id": "identitytoolkit.relyingparty.verifyPassword",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "VerifyPasswordResponse"
          }
        },
        "verifyCustomToken": {
          "path": "verifyCustomToken",
          "id": "identitytoolkit.relyingparty.verifyCustomToken",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "VerifyCustomTokenResponse"
          },
          "description": "Verifies the developer asserted ID token.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest"
          }
        },
        "verifyPhoneNumber": {
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest"
          },
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.verifyPhoneNumber",
          "path": "verifyPhoneNumber",
          "httpMethod": "POST",
          "description": "Verifies ownership of a phone number and creates/updates the user account accordingly."
        },
        "setAccountInfo": {
          "response": {
            "$ref": "SetAccountInfoResponse"
          },
          "description": "Set account info for a user.",
          "id": "identitytoolkit.relyingparty.setAccountInfo",
          "httpMethod": "POST",
          "path": "setAccountInfo",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySetAccountInfoRequest"
          }
        },
        "downloadAccount": {
          "response": {
            "$ref": "DownloadAccountResponse"
          },
          "id": "identitytoolkit.relyingparty.downloadAccount",
          "path": "downloadAccount",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyDownloadAccountRequest"
          },
          "description": "Batch download user accounts."
        },
        "sendVerificationCode": {
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeResponse"
          },
          "path": "sendVerificationCode",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeRequest"
          },
          "description": "Send SMS verification code.",
          "id": "identitytoolkit.relyingparty.sendVerificationCode",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "deleteAccount": {
          "path": "deleteAccount",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "description": "Delete user account.",
          "response": {
            "$ref": "DeleteAccountResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyDeleteAccountRequest"
          },
          "id": "identitytoolkit.relyingparty.deleteAccount"
        },
        "emailLinkSignin": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest"
          },
          "path": "emailLinkSignin",
          "id": "identitytoolkit.relyingparty.emailLinkSignin",
          "httpMethod": "POST",
          "description": "Reset password for a user.",
          "response": {
            "$ref": "EmailLinkSigninResponse"
          }
        },
        "verifyAssertion": {
          "id": "identitytoolkit.relyingparty.verifyAssertion",
          "httpMethod": "POST",
          "response": {
            "$ref": "VerifyAssertionResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyAssertionRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "verifyAssertion",
          "description": "Verifies the assertion returned by the IdP."
        },
        "getRecaptchaParam": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Get recaptcha secure param.",
          "path": "getRecaptchaParam",
          "id": "identitytoolkit.relyingparty.getRecaptchaParam",
          "response": {
            "$ref": "GetRecaptchaParamResponse"
          }
        },
        "getProjectConfig": {
          "id": "identitytoolkit.relyingparty.getProjectConfig",
          "description": "Get project configuration.",
          "httpMethod": "GET",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyGetProjectConfigResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "projectNumber": {
              "location": "query",
              "type": "string",
              "description": "GCP project number of the request."
            },
            "delegatedProjectNumber": {
              "description": "Delegated GCP project number of the request.",
              "type": "string",
              "location": "query"
            }
          },
          "path": "getProjectConfig"
        },
        "resetPassword": {
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyResetPasswordRequest"
          },
          "response": {
            "$ref": "ResetPasswordResponse"
          },
          "id": "identitytoolkit.relyingparty.resetPassword",
          "httpMethod": "POST",
          "path": "resetPassword",
          "description": "Reset password for a user.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "getPublicKeys": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.getPublicKeys",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyGetPublicKeysResponse"
          },
          "path": "publicKeys",
          "description": "Get token signing public key."
        },
        "createAuthUri": {
          "path": "createAuthUri",
          "description": "Creates the URI used by the IdP to authenticate the user.",
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyCreateAuthUriRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.createAuthUri",
          "response": {
            "$ref": "CreateAuthUriResponse"
          }
        }
      }
    }
  },
  "baseUrl": "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
  "discoveryVersion": "v1",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/firebase": {
          "description": "View and administer all your Firebase data and settings"
        }
      }
    }
  },
  "batchPath": "batch/identitytoolkit/v3",
  "canonicalName": "Identity Toolkit",
  "description": "Help the third party sites to implement federated login.",
  "kind": "discovery#restDescription",
  "schemas": {
    "IdentitytoolkitRelyingpartyGetPublicKeysResponse": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "description": "Respone of getting public keys.",
      "id": "IdentitytoolkitRelyingpartyGetPublicKeysResponse"
    },
    "IdpConfig": {
      "description": "Template for a single idp configuration.",
      "properties": {
        "secret": {
          "description": "OAuth2 client secret.",
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether this IDP is enabled."
        },
        "experimentPercent": {
          "type": "integer",
          "description": "Percent of users who will be prompted/redirected federated login for this IDP.",
          "format": "int32"
        },
        "provider": {
          "type": "string",
          "description": "OAuth2 provider."
        },
        "whitelistedAudiences": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Whitelisted client IDs for audience check."
        },
        "clientId": {
          "description": "OAuth2 client ID.",
          "type": "string"
        }
      },
      "id": "IdpConfig",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyGetAccountInfoRequest": {
      "description": "Request to get the account information.",
      "type": "object",
      "properties": {
        "phoneNumber": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Privileged caller can query users by specified phone number."
        },
        "localId": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The list of local ID's of the users to inquiry."
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "email": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The list of emails of the users to inquiry."
        },
        "delegatedProjectNumber": {
          "type": "string",
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        }
      },
      "id": "IdentitytoolkitRelyingpartyGetAccountInfoRequest"
    },
    "DeleteAccountResponse": {
      "properties": {
        "kind": {
          "default": "identitytoolkit#DeleteAccountResponse",
          "description": "The fixed string \"identitytoolkit#DeleteAccountResponse\".",
          "type": "string"
        }
      },
      "description": "Respone of deleting account.",
      "type": "object",
      "id": "DeleteAccountResponse"
    },
    "VerifyAssertionResponse": {
      "description": "Response of verifying the IDP assertion.",
      "type": "object",
      "properties": {
        "oauthExpireIn": {
          "format": "int32",
          "description": "The lifetime in seconds of the OAuth2 access token.",
          "type": "integer"
        },
        "idToken": {
          "type": "string",
          "description": "The ID token."
        },
        "oauthRequestToken": {
          "type": "string",
          "description": "The user approved request token for the OpenID OAuth extension."
        },
        "oauthTokenSecret": {
          "description": "The OAuth1 access token secret.",
          "type": "string"
        },
        "emailRecycled": {
          "type": "boolean",
          "description": "It's true if the email is recycled."
        },
        "screenName": {
          "description": "The screen_name of a Twitter user or the login name at Github.",
          "type": "string"
        },
        "language": {
          "description": "The language preference of the user.",
          "type": "string"
        },
        "dateOfBirth": {
          "description": "The birth date of the IdP account.",
          "type": "string"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "appScheme": {
          "description": "The custom scheme used by mobile app.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "identitytoolkit#VerifyAssertionResponse",
          "description": "The fixed string \"identitytoolkit#VerifyAssertionResponse\"."
        },
        "localId": {
          "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the user."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "The value is true if the IDP is also the email provider. It means the user owns the email."
        },
        "action": {
          "type": "string",
          "description": "The action code."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "errorMessage": {
          "type": "string",
          "description": "Client error code."
        },
        "rawUserInfo": {
          "type": "string",
          "description": "Raw IDP-returned user info."
        },
        "originalEmail": {
          "type": "string",
          "description": "The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email."
        },
        "providerId": {
          "type": "string",
          "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \"providerId\" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \"identifier\" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned."
        },
        "photoUrl": {
          "description": "The URI of the public accessible profiel picture.",
          "type": "string"
        },
        "nickName": {
          "type": "string",
          "description": "The nick name of the user."
        },
        "inputEmail": {
          "description": "It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.",
          "type": "string"
        },
        "isNewUser": {
          "type": "boolean",
          "description": "True if it's a new user sign-in, false if it's a returning user."
        },
        "needEmail": {
          "type": "boolean",
          "description": "Whether need client to supply email to complete the federated login flow."
        },
        "email": {
          "description": "The email returned by the IdP. NOTE: The federated login user may not own the email.",
          "type": "string"
        },
        "oauthIdToken": {
          "type": "string",
          "description": "The OIDC id token."
        },
        "needConfirmation": {
          "type": "boolean",
          "description": "Whether the assertion is from a non-trusted IDP and need account linking confirmation."
        },
        "timeZone": {
          "type": "string",
          "description": "The timezone of the user."
        },
        "oauthAccessToken": {
          "type": "string",
          "description": "The OAuth2 access token."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64",
          "type": "string"
        },
        "federatedId": {
          "description": "The unique ID identifies the IdP account.",
          "type": "string"
        },
        "refreshToken": {
          "description": "If idToken is STS id token, then this field will be refresh token.",
          "type": "string"
        },
        "fullName": {
          "type": "string",
          "description": "The full name of the user."
        },
        "appInstallationUrl": {
          "description": "URL for OTA app installation.",
          "type": "string"
        },
        "verifiedProvider": {
          "description": "When action is 'map', contains the idps which can be used for confirmation.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "oauthAuthorizationCode": {
          "type": "string",
          "description": "The OAuth2 authorization code."
        },
        "context": {
          "type": "string",
          "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback."
        },
        "oauthScope": {
          "type": "string",
          "description": "The scope for the OpenID OAuth extension."
        }
      },
      "id": "VerifyAssertionResponse"
    },
    "GetAccountInfoResponse": {
      "description": "Response of getting account information.",
      "type": "object",
      "id": "GetAccountInfoResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "UserInfo"
          },
          "description": "The info of the users."
        },
        "kind": {
          "default": "identitytoolkit#GetAccountInfoResponse",
          "description": "The fixed string \"identitytoolkit#GetAccountInfoResponse\".",
          "type": "string"
        }
      }
    },
    "CreateAuthUriResponse": {
      "id": "CreateAuthUriResponse",
      "type": "object",
      "description": "Response of creating the IDP authentication URL.",
      "properties": {
        "providerId": {
          "type": "string",
          "description": "The provider ID of the auth URI."
        },
        "sessionId": {
          "description": "Session ID which should be passed in the following verifyAssertion request.",
          "type": "string"
        },
        "allProviders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "all providers the user has once used to do federated login"
        },
        "forExistingProvider": {
          "type": "boolean",
          "description": "True if the authUri is for user's existing provider."
        },
        "registered": {
          "type": "boolean",
          "description": "Whether the user is registered if the identifier is an email."
        },
        "kind": {
          "description": "The fixed string identitytoolkit#CreateAuthUriResponse\".",
          "type": "string",
          "default": "identitytoolkit#CreateAuthUriResponse"
        },
        "captchaRequired": {
          "type": "boolean",
          "description": "True if captcha is required."
        },
        "signinMethods": {
          "description": "All sign-in methods this user has used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authUri": {
          "type": "string",
          "description": "The URI used by the IDP to authenticate the user."
        }
      }
    },
    "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest": {
      "description": "Request to verify a custom token",
      "type": "object",
      "properties": {
        "delegatedProjectNumber": {
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64"
        },
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        },
        "token": {
          "type": "string",
          "description": "The custom token to verify"
        },
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        }
      },
      "id": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest"
    },
    "IdentitytoolkitRelyingpartySignupNewUserRequest": {
      "description": "Request to signup new user, create anonymous user or anonymous user reauth.",
      "id": "IdentitytoolkitRelyingpartySignupNewUserRequest",
      "properties": {
        "captchaResponse": {
          "description": "Response to the captcha.",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable the user. Only can be used by service account."
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "tenantProjectNumber": {
          "description": "Tenant project number to be used for idp discovery.",
          "type": "string",
          "format": "uint64"
        },
        "password": {
          "description": "The new password of the user.",
          "type": "string"
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "tenantId": {
          "type": "string",
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Privileged caller can create user with specified phone number."
        },
        "captchaChallenge": {
          "description": "The captcha challenge.",
          "type": "string"
        },
        "emailVerified": {
          "description": "Mark the email as verified or not. Only can be used by service account.",
          "type": "boolean"
        },
        "localId": {
          "type": "string",
          "description": "Privileged caller can create user with specified user id."
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyCreateAuthUriRequest": {
      "description": "Request to get the IDP authentication URL.",
      "id": "IdentitytoolkitRelyingpartyCreateAuthUriRequest",
      "properties": {
        "sessionId": {
          "type": "string",
          "description": "The session_id passed by client."
        },
        "providerId": {
          "type": "string",
          "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
        },
        "authFlowType": {
          "type": "string",
          "description": "Explicitly specify the auth flow type. Currently only support \"CODE_FLOW\" type. The field is only used for Google provider."
        },
        "tenantProjectNumber": {
          "format": "uint64",
          "type": "string",
          "description": "Tenant project number to be used for idp discovery."
        },
        "customParameter": {
          "description": "The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.",
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "description": "The customized query parameter."
          }
        },
        "oauthConsumerKey": {
          "description": "The developer's consumer key for OpenId OAuth Extension",
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback."
        },
        "hostedDomain": {
          "description": "The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.",
          "type": "string"
        },
        "otaApp": {
          "description": "The native app package for OTA installation.",
          "type": "string"
        },
        "oauthScope": {
          "type": "string",
          "description": "Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant"
        },
        "openidRealm": {
          "type": "string",
          "description": "Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set."
        },
        "continueUri": {
          "type": "string",
          "description": "The URI to which the IDP redirects the user after the federated login flow."
        },
        "clientId": {
          "type": "string",
          "description": "The relying party OAuth client ID."
        },
        "identifier": {
          "description": "The email or federated ID of the user.",
          "type": "string"
        },
        "tenantId": {
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
          "type": "string"
        },
        "appId": {
          "type": "string",
          "description": "The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS."
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyGetProjectConfigResponse": {
      "description": "Response of getting the project configuration.",
      "id": "IdentitytoolkitRelyingpartyGetProjectConfigResponse",
      "properties": {
        "verifyEmailTemplate": {
          "$ref": "EmailTemplate",
          "description": "Verify email template."
        },
        "allowPasswordUser": {
          "type": "boolean",
          "description": "Whether to allow password user sign in or sign up."
        },
        "legacyResetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Legacy reset password email template."
        },
        "dynamicLinksDomain": {
          "type": "string"
        },
        "authorizedDomains": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Authorized domains."
        },
        "resetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Reset password email template."
        },
        "projectId": {
          "type": "string",
          "description": "Project ID of the relying party."
        },
        "useEmailSending": {
          "description": "Whether to use email sending provided by Firebear.",
          "type": "boolean"
        },
        "apiKey": {
          "type": "string",
          "description": "Browser API key, needed when making http request to Apiary."
        },
        "idpConfig": {
          "type": "array",
          "items": {
            "$ref": "IdpConfig"
          },
          "description": "OAuth2 provider configuration."
        },
        "enableAnonymousUser": {
          "type": "boolean",
          "description": "Whether anonymous user is enabled."
        },
        "changeEmailTemplate": {
          "description": "Change email template.",
          "$ref": "EmailTemplate"
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartySendVerificationCodeRequest": {
      "description": "Request for Identitytoolkit-SendVerificationCode",
      "type": "object",
      "properties": {
        "recaptchaToken": {
          "description": "Recaptcha solution.",
          "type": "string"
        },
        "iosSecret": {
          "type": "string",
          "description": "Secret delivered to iOS app via APNS."
        },
        "phoneNumber": {
          "description": "The phone number to send the verification code to in E.164 format.",
          "type": "string"
        },
        "iosReceipt": {
          "description": "Receipt of successful app token validation with APNS.",
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartySendVerificationCodeRequest"
    },
    "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "temporaryProof": {
          "type": "string"
        },
        "sessionInfo": {
          "description": "The session info previously returned by IdentityToolkit-SendVerificationCode.",
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "verificationProof": {
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest",
      "description": "Request for Identitytoolkit-VerifyPhoneNumber"
    },
    "SignupNewUserResponse": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "description": "If idToken is STS id token, then this field will be refresh token.",
          "type": "string"
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "localId": {
          "type": "string",
          "description": "The RP local ID of the user."
        },
        "idToken": {
          "type": "string",
          "description": "The Gitkit id token to login the newly sign up user."
        },
        "kind": {
          "type": "string",
          "default": "identitytoolkit#SignupNewUserResponse",
          "description": "The fixed string \"identitytoolkit#SignupNewUserResponse\"."
        }
      },
      "description": "Response of signing up new user, creating anonymous user or anonymous user reauth.",
      "id": "SignupNewUserResponse"
    },
    "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse": {
      "properties": {
        "refreshToken": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "localId": {
          "type": "string"
        },
        "verificationProofExpiresIn": {
          "format": "int64",
          "type": "string"
        },
        "isNewUser": {
          "type": "boolean"
        },
        "expiresIn": {
          "format": "int64",
          "type": "string"
        },
        "temporaryProofExpiresIn": {
          "format": "int64",
          "type": "string"
        },
        "verificationProof": {
          "type": "string"
        },
        "temporaryProof": {
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse",
      "description": "Response for Identitytoolkit-VerifyPhoneNumber",
      "type": "object"
    },
    "VerifyCustomTokenResponse": {
      "type": "object",
      "description": "Response from verifying a custom token",
      "properties": {
        "refreshToken": {
          "description": "If idToken is STS id token, then this field will be refresh token.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "identitytoolkit#VerifyCustomTokenResponse",
          "description": "The fixed string \"identitytoolkit#VerifyCustomTokenResponse\"."
        },
        "expiresIn": {
          "format": "int64",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "type": "string"
        },
        "isNewUser": {
          "description": "True if it's a new user sign-in, false if it's a returning user.",
          "type": "boolean"
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token for authenticated user."
        }
      },
      "id": "VerifyCustomTokenResponse"
    },
    "IdentitytoolkitRelyingpartyVerifyAssertionRequest": {
      "properties": {
        "returnSecureToken": {
          "description": "Whether return sts id token and refresh token instead of gitkit token.",
          "type": "boolean"
        },
        "sessionId": {
          "description": "Session ID, which should match the one in previous createAuthUri request.",
          "type": "string"
        },
        "requestUri": {
          "type": "string",
          "description": "The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP."
        },
        "returnIdpCredential": {
          "description": "Whether return 200 and IDP credential rather than throw exception when federated id is already linked.",
          "type": "boolean"
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "autoCreate": {
          "type": "boolean",
          "description": "When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist."
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        },
        "tenantId": {
          "type": "string",
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."
        },
        "returnRefreshToken": {
          "description": "Whether to return refresh tokens.",
          "type": "boolean"
        },
        "postBody": {
          "description": "The post body if the request is a HTTP POST.",
          "type": "string"
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "tenantProjectNumber": {
          "type": "string",
          "format": "uint64",
          "description": "Tenant project number to be used for idp discovery."
        },
        "pendingIdToken": {
          "description": "The GITKit token for the non-trusted IDP pending to be confirmed by the user.",
          "type": "string"
        }
      },
      "description": "Request to verify the IDP assertion.",
      "id": "IdentitytoolkitRelyingpartyVerifyAssertionRequest",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyEmailLinkSigninRequest": {
      "type": "object",
      "description": "Request to sign in with email.",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email address of the user."
        },
        "oobCode": {
          "type": "string",
          "description": "The confirmation code."
        },
        "idToken": {
          "description": "Token for linking flow.",
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest"
    },
    "IdentitytoolkitRelyingpartySignOutUserRequest": {
      "description": "Request to sign out user.",
      "properties": {
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "IdentitytoolkitRelyingpartySignOutUserRequest"
    },
    "Relyingparty": {
      "type": "object",
      "description": "Request of getting a code for user confirmation (reset password, change email etc.)",
      "id": "Relyingparty",
      "properties": {
        "idToken": {
          "description": "The user's Gitkit login token for email change.",
          "type": "string"
        },
        "iOSBundleId": {
          "type": "string",
          "description": "the iOS bundle id of iOS app to handle the action code"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "androidInstallApp": {
          "type": "boolean",
          "description": "whether or not to install the android app on the device where the link is opened"
        },
        "newEmail": {
          "type": "string",
          "description": "The new email if the code is for email change."
        },
        "androidMinimumVersion": {
          "description": "minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app",
          "type": "string"
        },
        "requestType": {
          "description": "The request type.",
          "type": "string"
        },
        "userIp": {
          "description": "The IP address of the user.",
          "type": "string"
        },
        "captchaResp": {
          "description": "The recaptcha response from the user.",
          "type": "string"
        },
        "androidPackageName": {
          "description": "android package name of the android app to handle the action code",
          "type": "string"
        },
        "continueUrl": {
          "type": "string",
          "description": "The url to continue to the Gitkit app"
        },
        "challenge": {
          "description": "The recaptcha challenge presented to the user.",
          "type": "string"
        },
        "iOSAppStoreId": {
          "description": "iOS app store id to download the app if it's not already installed",
          "type": "string"
        },
        "canHandleCodeInApp": {
          "type": "boolean",
          "description": "whether or not the app can handle the oob code without first going to web"
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#relyingparty\".",
          "type": "string",
          "default": "identitytoolkit#relyingparty"
        }
      }
    },
    "IdentitytoolkitRelyingpartySetProjectConfigRequest": {
      "description": "Request to set the project configuration.",
      "properties": {
        "verifyEmailTemplate": {
          "description": "Verify email template.",
          "$ref": "EmailTemplate"
        },
        "changeEmailTemplate": {
          "$ref": "EmailTemplate",
          "description": "Change email template."
        },
        "enableAnonymousUser": {
          "description": "Whether to enable anonymous user.",
          "type": "boolean"
        },
        "useEmailSending": {
          "type": "boolean",
          "description": "Whether to use email sending provided by Firebear."
        },
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string",
          "format": "int64"
        },
        "allowPasswordUser": {
          "description": "Whether to allow password user sign in or sign up.",
          "type": "boolean"
        },
        "authorizedDomains": {
          "description": "Authorized domains for widget redirect.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "idpConfig": {
          "type": "array",
          "description": "Oauth2 provider configuration.",
          "items": {
            "$ref": "IdpConfig"
          }
        },
        "apiKey": {
          "description": "Browser API key, needed when making http request to Apiary.",
          "type": "string"
        },
        "resetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Reset password email template."
        },
        "legacyResetPasswordTemplate": {
          "description": "Legacy reset password email template.",
          "$ref": "EmailTemplate"
        }
      },
      "type": "object",
      "id": "IdentitytoolkitRelyingpartySetProjectConfigRequest"
    },
    "UserInfo": {
      "type": "object",
      "id": "UserInfo",
      "description": "Template for an individual account info.",
      "properties": {
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "photoUrl": {
          "type": "string",
          "description": "The URL of the user profile photo."
        },
        "validSince": {
          "type": "string",
          "format": "int64",
          "description": "Timestamp in seconds for valid login token."
        },
        "createdAt": {
          "description": "User creation timestamp.",
          "format": "int64",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer",
          "description": "Version of the user's password."
        },
        "passwordHash": {
          "format": "byte",
          "description": "The user's hashed password.",
          "type": "string"
        },
        "rawPassword": {
          "description": "The user's plain text password.",
          "type": "string"
        },
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "lastLoginAt": {
          "description": "last login timestamp.",
          "type": "string",
          "format": "int64"
        },
        "providerUserInfo": {
          "type": "array",
          "items": {
            "properties": {
              "displayName": {
                "description": "The user's display name at the IDP.",
                "type": "string"
              },
              "providerId": {
                "description": "The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.",
                "type": "string"
              },
              "email": {
                "type": "string",
                "description": "User's email at IDP."
              },
              "phoneNumber": {
                "type": "string",
                "description": "User's phone number."
              },
              "federatedId": {
                "description": "User's identifier at IDP.",
                "type": "string"
              },
              "screenName": {
                "description": "User's screen name at Twitter or login name at Github.",
                "type": "string"
              },
              "photoUrl": {
                "type": "string",
                "description": "The user's photo url at the IDP."
              },
              "rawId": {
                "type": "string",
                "description": "User's raw identifier directly returned from IDP."
              }
            },
            "type": "object"
          },
          "description": "The IDP of the user."
        },
        "disabled": {
          "description": "Whether the user is disabled.",
          "type": "boolean"
        },
        "customAuth": {
          "type": "boolean",
          "description": "Whether the user is authenticated by the developer."
        },
        "salt": {
          "type": "string",
          "description": "The user's password salt.",
          "format": "byte"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Whether the email has been verified."
        },
        "customAttributes": {
          "description": "The custom attributes to be set in the user's id token.",
          "type": "string"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "screenName": {
          "description": "User's screen name at Twitter or login name at Github.",
          "type": "string"
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "passwordUpdatedAt": {
          "format": "double",
          "type": "number",
          "description": "The timestamp when the password was last updated."
        }
      }
    },
    "IdentitytoolkitRelyingpartySetAccountInfoRequest": {
      "properties": {
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        },
        "captchaResponse": {
          "type": "string",
          "description": "Response to the captcha."
        },
        "oobCode": {
          "type": "string",
          "description": "The out-of-band code of the change email request."
        },
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Mark the email as verified or not."
        },
        "upgradeToFederatedLogin": {
          "type": "boolean",
          "description": "Mark the user to upgrade to federated login."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "disableUser": {
          "type": "boolean",
          "description": "Whether to disable the user."
        },
        "deleteAttribute": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The attributes users request to delete."
        },
        "lastLoginAt": {
          "description": "Last login timestamp.",
          "format": "int64",
          "type": "string"
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "validSince": {
          "description": "Timestamp in seconds for valid login token.",
          "format": "int64",
          "type": "string"
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "provider": {
          "description": "The associated IDPs of the user.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "customAttributes": {
          "type": "string",
          "description": "The custom attributes to be set in the user's id token."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Privileged caller can update user with specified phone number."
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "deleteProvider": {
          "description": "The IDPs the user request to delete.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "createdAt": {
          "description": "The timestamp when the account is created.",
          "type": "string",
          "format": "int64"
        },
        "password": {
          "type": "string",
          "description": "The new password of the user."
        }
      },
      "id": "IdentitytoolkitRelyingpartySetAccountInfoRequest",
      "description": "Request to set the account information.",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartySendVerificationCodeResponse": {
      "id": "IdentitytoolkitRelyingpartySendVerificationCodeResponse",
      "type": "object",
      "properties": {
        "sessionInfo": {
          "description": "Encrypted session information",
          "type": "string"
        }
      },
      "description": "Response for Identitytoolkit-SendVerificationCode"
    },
    "IdentitytoolkitRelyingpartyResetPasswordRequest": {
      "description": "Request to reset the password.",
      "type": "object",
      "properties": {
        "oobCode": {
          "type": "string",
          "description": "The confirmation code."
        },
        "email": {
          "description": "The email address of the user.",
          "type": "string"
        },
        "oldPassword": {
          "type": "string",
          "description": "The old password inputted by the user."
        },
        "newPassword": {
          "type": "string",
          "description": "The new password inputted by the user."
        }
      },
      "id": "IdentitytoolkitRelyingpartyResetPasswordRequest"
    },
    "ResetPasswordResponse": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#ResetPasswordResponse\".",
          "default": "identitytoolkit#ResetPasswordResponse"
        },
        "newEmail": {
          "type": "string",
          "description": "If the out-of-band code is for email recovery, the user's new email."
        },
        "requestType": {
          "type": "string",
          "description": "The request type."
        },
        "email": {
          "description": "The user's email. If the out-of-band code is for email recovery, the user's original email.",
          "type": "string"
        }
      },
      "id": "ResetPasswordResponse",
      "type": "object",
      "description": "Response of resetting the password."
    },
    "IdentitytoolkitRelyingpartyDeleteAccountRequest": {
      "description": "Request to delete account.",
      "type": "object",
      "properties": {
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "delegatedProjectNumber": {
          "type": "string",
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token or STS id token of the authenticated user."
        }
      },
      "id": "IdentitytoolkitRelyingpartyDeleteAccountRequest"
    },
    "DownloadAccountResponse": {
      "description": "Response of downloading accounts in batch.",
      "id": "DownloadAccountResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The next page token. To be used in a subsequent request to return the next page of results."
        },
        "kind": {
          "type": "string",
          "default": "identitytoolkit#DownloadAccountResponse",
          "description": "The fixed string \"identitytoolkit#DownloadAccountResponse\"."
        },
        "users": {
          "type": "array",
          "description": "The user accounts data.",
          "items": {
            "$ref": "UserInfo"
          }
        }
      }
    },
    "IdentitytoolkitRelyingpartyVerifyPasswordRequest": {
      "id": "IdentitytoolkitRelyingpartyVerifyPasswordRequest",
      "properties": {
        "tenantProjectNumber": {
          "type": "string",
          "description": "Tenant project number to be used for idp discovery.",
          "format": "uint64"
        },
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64",
          "type": "string"
        },
        "pendingIdToken": {
          "description": "The GITKit token for the non-trusted IDP, which is to be confirmed by the user.",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "password": {
          "description": "The password inputed by the user.",
          "type": "string"
        },
        "captchaResponse": {
          "description": "Response to the captcha.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "captchaChallenge": {
          "description": "The captcha challenge.",
          "type": "string"
        },
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        },
        "tenantId": {
          "type": "string",
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Request to verify the password."
    },
    "SetAccountInfoResponse": {
      "description": "Respone of setting the account information.",
      "properties": {
        "passwordHash": {
          "type": "string",
          "description": "The user's hashed password.",
          "format": "byte"
        },
        "expiresIn": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64"
        },
        "providerUserInfo": {
          "items": {
            "type": "object",
            "properties": {
              "providerId": {
                "description": "The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.",
                "type": "string"
              },
              "displayName": {
                "description": "The user's display name at the IDP.",
                "type": "string"
              },
              "photoUrl": {
                "type": "string",
                "description": "The user's photo url at the IDP."
              },
              "federatedId": {
                "description": "User's identifier at IDP.",
                "type": "string"
              }
            }
          },
          "type": "array",
          "description": "The user's profiles at the associated IdPs."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#SetAccountInfoResponse\".",
          "default": "identitytoolkit#SetAccountInfoResponse",
          "type": "string"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "refreshToken": {
          "description": "If idToken is STS id token, then this field will be refresh token.",
          "type": "string"
        },
        "idToken": {
          "description": "The Gitkit id token to login the newly sign up user.",
          "type": "string"
        },
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "newEmail": {
          "description": "The new email the user attempts to change to.",
          "type": "string"
        },
        "emailVerified": {
          "description": "If email has been verified.",
          "type": "boolean"
        }
      },
      "type": "object",
      "id": "SetAccountInfoResponse"
    },
    "IdentitytoolkitRelyingpartySignOutUserResponse": {
      "id": "IdentitytoolkitRelyingpartySignOutUserResponse",
      "properties": {
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Response of signing out user."
    },
    "GetRecaptchaParamResponse": {
      "id": "GetRecaptchaParamResponse",
      "properties": {
        "recaptchaStoken": {
          "description": "The stoken field for the recaptcha widget, used to request captcha challenge.",
          "type": "string"
        },
        "recaptchaSiteKey": {
          "type": "string",
          "description": "Site key registered at recaptcha."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#GetRecaptchaParamResponse\".",
          "default": "identitytoolkit#GetRecaptchaParamResponse",
          "type": "string"
        }
      },
      "description": "Response of getting recaptcha param.",
      "type": "object"
    },
    "VerifyPasswordResponse": {
      "properties": {
        "registered": {
          "description": "Whether the email is registered.",
          "type": "boolean"
        },
        "photoUrl": {
          "type": "string",
          "description": "The URI of the user's photo at IdP"
        },
        "oauthAuthorizationCode": {
          "description": "The OAuth2 authorization code.",
          "type": "string"
        },
        "localId": {
          "type": "string",
          "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID."
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token for authenticated user."
        },
        "email": {
          "type": "string",
          "description": "The email returned by the IdP. NOTE: The federated login user may not own the email."
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "oauthExpireIn": {
          "format": "int32",
          "type": "integer",
          "description": "The lifetime in seconds of the OAuth2 access token."
        },
        "expiresIn": {
          "format": "int64",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "type": "string"
        },
        "oauthAccessToken": {
          "type": "string",
          "description": "The OAuth2 access token."
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#VerifyPasswordResponse\".",
          "type": "string",
          "default": "identitytoolkit#VerifyPasswordResponse"
        }
      },
      "id": "VerifyPasswordResponse",
      "description": "Request of verifying the password.",
      "type": "object"
    },
    "UploadAccountResponse": {
      "type": "object",
      "id": "UploadAccountResponse",
      "properties": {
        "kind": {
          "default": "identitytoolkit#UploadAccountResponse",
          "description": "The fixed string \"identitytoolkit#UploadAccountResponse\".",
          "type": "string"
        },
        "error": {
          "items": {
            "properties": {
              "index": {
                "description": "The index of the malformed account, starting from 0.",
                "format": "int32",
                "type": "integer"
              },
              "message": {
                "type": "string",
                "description": "Detailed error message for the account info."
              }
            },
            "type": "object"
          },
          "description": "The error encountered while processing the account info.",
          "type": "array"
        }
      },
      "description": "Respone of uploading accounts in batch."
    },
    "IdentitytoolkitRelyingpartyDownloadAccountRequest": {
      "id": "IdentitytoolkitRelyingpartyDownloadAccountRequest",
      "type": "object",
      "description": "Request to download user account in batch.",
      "properties": {
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string",
          "format": "int64"
        },
        "maxResults": {
          "description": "The max number of results to return in the response.",
          "type": "integer",
          "format": "uint32"
        },
        "nextPageToken": {
          "description": "The token for the next page. This should be taken from the previous response.",
          "type": "string"
        },
        "targetProjectId": {
          "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential.",
          "type": "string"
        }
      }
    },
    "IdentitytoolkitRelyingpartyUploadAccountRequest": {
      "id": "IdentitytoolkitRelyingpartyUploadAccountRequest",
      "description": "Request to upload user account in batch.",
      "type": "object",
      "properties": {
        "memoryCost": {
          "type": "integer",
          "format": "int32",
          "description": "Memory cost for hash calculation. Used by scrypt similar algorithms."
        },
        "targetProjectId": {
          "type": "string",
          "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential."
        },
        "saltSeparator": {
          "format": "byte",
          "description": "The salt separator.",
          "type": "string"
        },
        "hashAlgorithm": {
          "description": "The password hash algorithm.",
          "type": "string"
        },
        "blockSize": {
          "type": "integer",
          "format": "int32"
        },
        "cpuMemCost": {
          "format": "int32",
          "description": "The following 4 fields are for standard scrypt algorithm.",
          "type": "integer"
        },
        "signerKey": {
          "description": "The key for to hash the password.",
          "type": "string",
          "format": "byte"
        },
        "sanityCheck": {
          "description": "If true, backend will do sanity check(including duplicate email and federated id) when uploading account.",
          "type": "boolean"
        },
        "rounds": {
          "type": "integer",
          "description": "Rounds for hash calculation. Used by scrypt and similar algorithms.",
          "format": "int32"
        },
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string",
          "format": "int64"
        },
        "parallelization": {
          "format": "int32",
          "type": "integer"
        },
        "allowOverwrite": {
          "type": "boolean",
          "description": "Whether allow overwrite existing account when user local_id exists."
        },
        "users": {
          "items": {
            "$ref": "UserInfo"
          },
          "description": "The account info to be stored.",
          "type": "array"
        },
        "dkLen": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EmailLinkSigninResponse": {
      "properties": {
        "localId": {
          "description": "The RP local ID of the user.",
          "type": "string"
        },
        "refreshToken": {
          "description": "The refresh token for the signed in user.",
          "type": "string"
        },
        "expiresIn": {
          "format": "int64",
          "description": "Expiration time of STS id token in seconds.",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The STS id token to login the newly signed in user."
        },
        "isNewUser": {
          "description": "Whether the user is new.",
          "type": "boolean"
        },
        "email": {
          "description": "The user's email.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#EmailLinkSigninResponse\".",
          "default": "identitytoolkit#EmailLinkSigninResponse"
        }
      },
      "id": "EmailLinkSigninResponse",
      "type": "object",
      "description": "Response of email signIn."
    },
    "EmailTemplate": {
      "properties": {
        "replyTo": {
          "type": "string",
          "description": "Reply-to address."
        },
        "format": {
          "description": "Email body format.",
          "type": "string"
        },
        "subject": {
          "type": "string",
          "description": "Subject of the email."
        },
        "body": {
          "type": "string",
          "description": "Email body."
        },
        "fromDisplayName": {
          "description": "From display name.",
          "type": "string"
        },
        "from": {
          "type": "string",
          "description": "From address of the email."
        }
      },
      "type": "object",
      "id": "EmailTemplate",
      "description": "Template for an email template."
    },
    "IdentitytoolkitRelyingpartySetProjectConfigResponse": {
      "description": "Response of setting the project configuration.",
      "properties": {
        "projectId": {
          "description": "Project ID of the relying party.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "IdentitytoolkitRelyingpartySetProjectConfigResponse"
    },
    "GetOobConfirmationCodeResponse": {
      "id": "GetOobConfirmationCodeResponse",
      "description": "Response of getting a code for user confirmation (reset password, change email etc.).",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#GetOobConfirmationCodeResponse\".",
          "default": "identitytoolkit#GetOobConfirmationCodeResponse"
        },
        "oobCode": {
          "description": "The code to be send to the user.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email address that the email is sent to."
        }
      }
    }
  },
  "documentationLink": "https://developers.google.com/identity-toolkit/v3/",
  "title": "Google Identity Toolkit API",
  "rootUrl": "https://www.googleapis.com/",
  "parameters": {
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "quotaUser": {
      "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true"
    },
    "alt": {
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "default": "json",
      "enum": [
        "json"
      ],
      "description": "Data format for the response.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "userIp": {
      "location": "query",
      "description": "Deprecated. Please use quotaUser instead.",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    }
  },
  "icons": {
    "x32": "https://www.gstatic.com/images/branding/product/1x/googleg_32dp.png",
    "x16": "https://www.gstatic.com/images/branding/product/1x/googleg_16dp.png"
  },
  "etag": "\"9eZ1uxVRThTDhLJCZHhqs3eQWz4/taa97NuhcHSAt0fUktvGBcH-OqE\"",
  "id": "identitytoolkit:v3",
  "protocol": "rest",
  "name": "identitytoolkit",
  "version": "v3",
  "ownerName": "Google",
  "servicePath": "identitytoolkit/v3/relyingparty/",
  "revision": "20180723",
  "basePath": "/identitytoolkit/v3/relyingparty/",
  "ownerDomain": "google.com"
}
