{
  "schemas": {
    "IdentitytoolkitRelyingpartyGetAccountInfoRequest": {
      "properties": {
        "localId": {
          "description": "The list of local ID's of the users to inquiry.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64",
          "type": "string"
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of emails of the users to inquiry."
        },
        "phoneNumber": {
          "type": "array",
          "description": "Privileged caller can query users by specified phone number.",
          "items": {
            "type": "string"
          }
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        }
      },
      "id": "IdentitytoolkitRelyingpartyGetAccountInfoRequest",
      "description": "Request to get the account information.",
      "type": "object"
    },
    "DeleteAccountResponse": {
      "properties": {
        "kind": {
          "description": "The fixed string \"identitytoolkit#DeleteAccountResponse\".",
          "default": "identitytoolkit#DeleteAccountResponse",
          "type": "string"
        }
      },
      "id": "DeleteAccountResponse",
      "description": "Respone of deleting account.",
      "type": "object"
    },
    "EmailLinkSigninResponse": {
      "id": "EmailLinkSigninResponse",
      "properties": {
        "idToken": {
          "type": "string",
          "description": "The STS id token to login the newly signed in user."
        },
        "email": {
          "description": "The user's email.",
          "type": "string"
        },
        "isNewUser": {
          "description": "Whether the user is new.",
          "type": "boolean"
        },
        "localId": {
          "type": "string",
          "description": "The RP local ID of the user."
        },
        "expiresIn": {
          "format": "int64",
          "type": "string",
          "description": "Expiration time of STS id token in seconds."
        },
        "refreshToken": {
          "description": "The refresh token for the signed in user.",
          "type": "string"
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#EmailLinkSigninResponse\".",
          "default": "identitytoolkit#EmailLinkSigninResponse",
          "type": "string"
        }
      },
      "description": "Response of email signIn.",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyDeleteAccountRequest": {
      "id": "IdentitytoolkitRelyingpartyDeleteAccountRequest",
      "properties": {
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        },
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token or STS id token of the authenticated user."
        }
      },
      "description": "Request to delete account.",
      "type": "object"
    },
    "GetAccountInfoResponse": {
      "id": "GetAccountInfoResponse",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "UserInfo"
          },
          "description": "The info of the users."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#GetAccountInfoResponse\".",
          "type": "string",
          "default": "identitytoolkit#GetAccountInfoResponse"
        }
      },
      "type": "object",
      "description": "Response of getting account information."
    },
    "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest": {
      "properties": {
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        },
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        },
        "returnSecureToken": {
          "description": "Whether return sts id token and refresh token instead of gitkit token.",
          "type": "boolean"
        },
        "token": {
          "type": "string",
          "description": "The custom token to verify"
        }
      },
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest",
      "description": "Request to verify a custom token"
    },
    "UploadAccountResponse": {
      "type": "object",
      "id": "UploadAccountResponse",
      "properties": {
        "error": {
          "items": {
            "properties": {
              "index": {
                "type": "integer",
                "format": "int32",
                "description": "The index of the malformed account, starting from 0."
              },
              "message": {
                "type": "string",
                "description": "Detailed error message for the account info."
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "The error encountered while processing the account info."
        },
        "kind": {
          "default": "identitytoolkit#UploadAccountResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#UploadAccountResponse\"."
        }
      },
      "description": "Respone of uploading accounts in batch."
    },
    "Relyingparty": {
      "id": "Relyingparty",
      "properties": {
        "androidPackageName": {
          "type": "string",
          "description": "android package name of the android app to handle the action code"
        },
        "captchaResp": {
          "type": "string",
          "description": "The recaptcha response from the user."
        },
        "kind": {
          "type": "string",
          "default": "identitytoolkit#relyingparty",
          "description": "The fixed string \"identitytoolkit#relyingparty\"."
        },
        "idToken": {
          "description": "The user's Gitkit login token for email change.",
          "type": "string"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "androidInstallApp": {
          "description": "whether or not to install the android app on the device where the link is opened",
          "type": "boolean"
        },
        "canHandleCodeInApp": {
          "description": "whether or not the app can handle the oob code without first going to web",
          "type": "boolean"
        },
        "newEmail": {
          "type": "string",
          "description": "The new email if the code is for email change."
        },
        "continueUrl": {
          "description": "The url to continue to the Gitkit app",
          "type": "string"
        },
        "challenge": {
          "description": "The recaptcha challenge presented to the user.",
          "type": "string"
        },
        "requestType": {
          "type": "string",
          "description": "The request type."
        },
        "userIp": {
          "type": "string",
          "description": "The IP address of the user."
        },
        "iOSAppStoreId": {
          "description": "iOS app store id to download the app if it's not already installed",
          "type": "string"
        },
        "iOSBundleId": {
          "description": "the iOS bundle id of iOS app to handle the action code",
          "type": "string"
        },
        "androidMinimumVersion": {
          "type": "string",
          "description": "minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app"
        }
      },
      "type": "object",
      "description": "Request of getting a code for user confirmation (reset password, change email etc.)"
    },
    "SignupNewUserResponse": {
      "description": "Response of signing up new user, creating anonymous user or anonymous user reauth.",
      "type": "object",
      "id": "SignupNewUserResponse",
      "properties": {
        "refreshToken": {
          "description": "If idToken is STS id token, then this field will be refresh token.",
          "type": "string"
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#SignupNewUserResponse\".",
          "default": "identitytoolkit#SignupNewUserResponse",
          "type": "string"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "localId": {
          "description": "The RP local ID of the user.",
          "type": "string"
        },
        "expiresIn": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64"
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "idToken": {
          "description": "The Gitkit id token to login the newly sign up user.",
          "type": "string"
        }
      }
    },
    "GetRecaptchaParamResponse": {
      "type": "object",
      "id": "GetRecaptchaParamResponse",
      "description": "Response of getting recaptcha param.",
      "properties": {
        "recaptchaSiteKey": {
          "type": "string",
          "description": "Site key registered at recaptcha."
        },
        "recaptchaStoken": {
          "type": "string",
          "description": "The stoken field for the recaptcha widget, used to request captcha challenge."
        },
        "kind": {
          "default": "identitytoolkit#GetRecaptchaParamResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#GetRecaptchaParamResponse\"."
        }
      }
    },
    "IdentitytoolkitRelyingpartyUploadAccountRequest": {
      "description": "Request to upload user account in batch.",
      "id": "IdentitytoolkitRelyingpartyUploadAccountRequest",
      "type": "object",
      "properties": {
        "saltSeparator": {
          "format": "byte",
          "type": "string",
          "description": "The salt separator."
        },
        "allowOverwrite": {
          "description": "Whether allow overwrite existing account when user local_id exists.",
          "type": "boolean"
        },
        "rounds": {
          "type": "integer",
          "format": "int32",
          "description": "Rounds for hash calculation. Used by scrypt and similar algorithms."
        },
        "memoryCost": {
          "description": "Memory cost for hash calculation. Used by scrypt similar algorithms.",
          "type": "integer",
          "format": "int32"
        },
        "sanityCheck": {
          "type": "boolean",
          "description": "If true, backend will do sanity check(including duplicate email and federated id) when uploading account."
        },
        "cpuMemCost": {
          "description": "The following 4 fields are for standard scrypt algorithm.",
          "type": "integer",
          "format": "int32"
        },
        "users": {
          "items": {
            "$ref": "UserInfo"
          },
          "description": "The account info to be stored.",
          "type": "array"
        },
        "hashAlgorithm": {
          "type": "string",
          "description": "The password hash algorithm."
        },
        "parallelization": {
          "type": "integer",
          "format": "int32"
        },
        "signerKey": {
          "description": "The key for to hash the password.",
          "type": "string",
          "format": "byte"
        },
        "delegatedProjectNumber": {
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64"
        },
        "dkLen": {
          "format": "int32",
          "type": "integer"
        },
        "targetProjectId": {
          "type": "string",
          "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential."
        },
        "blockSize": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "GetOobConfirmationCodeResponse": {
      "id": "GetOobConfirmationCodeResponse",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The fixed string \"identitytoolkit#GetOobConfirmationCodeResponse\".",
          "default": "identitytoolkit#GetOobConfirmationCodeResponse",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email address that the email is sent to."
        },
        "oobCode": {
          "description": "The code to be send to the user.",
          "type": "string"
        }
      },
      "description": "Response of getting a code for user confirmation (reset password, change email etc.)."
    },
    "IdentitytoolkitRelyingpartyResetPasswordRequest": {
      "description": "Request to reset the password.",
      "id": "IdentitytoolkitRelyingpartyResetPasswordRequest",
      "properties": {
        "newPassword": {
          "description": "The new password inputted by the user.",
          "type": "string"
        },
        "email": {
          "description": "The email address of the user.",
          "type": "string"
        },
        "oobCode": {
          "description": "The confirmation code.",
          "type": "string"
        },
        "oldPassword": {
          "description": "The old password inputted by the user.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartySendVerificationCodeRequest": {
      "properties": {
        "recaptchaToken": {
          "description": "Recaptcha solution.",
          "type": "string"
        },
        "iosReceipt": {
          "type": "string",
          "description": "Receipt of successful app token validation with APNS."
        },
        "iosSecret": {
          "type": "string",
          "description": "Secret delivered to iOS app via APNS."
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number to send the verification code to in E.164 format."
        }
      },
      "id": "IdentitytoolkitRelyingpartySendVerificationCodeRequest",
      "description": "Request for Identitytoolkit-SendVerificationCode",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyVerifyAssertionRequest": {
      "type": "object",
      "description": "Request to verify the IDP assertion.",
      "id": "IdentitytoolkitRelyingpartyVerifyAssertionRequest",
      "properties": {
        "pendingIdToken": {
          "description": "The GITKit token for the non-trusted IDP pending to be confirmed by the user.",
          "type": "string"
        },
        "postBody": {
          "description": "The post body if the request is a HTTP POST.",
          "type": "string"
        },
        "tenantId": {
          "type": "string",
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."
        },
        "tenantProjectNumber": {
          "type": "string",
          "description": "Tenant project number to be used for idp discovery.",
          "format": "uint64"
        },
        "returnRefreshToken": {
          "type": "boolean",
          "description": "Whether to return refresh tokens."
        },
        "requestUri": {
          "type": "string",
          "description": "The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP."
        },
        "delegatedProjectNumber": {
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64"
        },
        "sessionId": {
          "type": "string",
          "description": "Session ID, which should match the one in previous createAuthUri request."
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "returnIdpCredential": {
          "description": "Whether return 200 and IDP credential rather than throw exception when federated id is already linked.",
          "type": "boolean"
        },
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        },
        "autoCreate": {
          "description": "When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist.",
          "type": "boolean"
        }
      }
    },
    "EmailTemplate": {
      "properties": {
        "from": {
          "description": "From address of the email.",
          "type": "string"
        },
        "fromDisplayName": {
          "description": "From display name.",
          "type": "string"
        },
        "subject": {
          "type": "string",
          "description": "Subject of the email."
        },
        "replyTo": {
          "type": "string",
          "description": "Reply-to address."
        },
        "body": {
          "type": "string",
          "description": "Email body."
        },
        "format": {
          "description": "Email body format.",
          "type": "string"
        }
      },
      "id": "EmailTemplate",
      "description": "Template for an email template.",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyGetPublicKeysResponse": {
      "id": "IdentitytoolkitRelyingpartyGetPublicKeysResponse",
      "description": "Respone of getting public keys.",
      "additionalProperties": {
        "type": "string"
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartySignOutUserRequest": {
      "type": "object",
      "id": "IdentitytoolkitRelyingpartySignOutUserRequest",
      "properties": {
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        }
      },
      "description": "Request to sign out user."
    },
    "VerifyPasswordResponse": {
      "description": "Request of verifying the password.",
      "type": "object",
      "properties": {
        "oauthAuthorizationCode": {
          "description": "The OAuth2 authorization code.",
          "type": "string"
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#VerifyPasswordResponse\".",
          "default": "identitytoolkit#VerifyPasswordResponse",
          "type": "string"
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "oauthExpireIn": {
          "description": "The lifetime in seconds of the OAuth2 access token.",
          "type": "integer",
          "format": "int32"
        },
        "localId": {
          "type": "string",
          "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "type": "string",
          "format": "int64"
        },
        "registered": {
          "type": "boolean",
          "description": "Whether the email is registered."
        },
        "idToken": {
          "description": "The GITKit token for authenticated user.",
          "type": "string"
        },
        "oauthAccessToken": {
          "description": "The OAuth2 access token.",
          "type": "string"
        },
        "refreshToken": {
          "description": "If idToken is STS id token, then this field will be refresh token.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email returned by the IdP. NOTE: The federated login user may not own the email."
        },
        "photoUrl": {
          "description": "The URI of the user's photo at IdP",
          "type": "string"
        }
      },
      "id": "VerifyPasswordResponse"
    },
    "IdentitytoolkitRelyingpartySetProjectConfigRequest": {
      "description": "Request to set the project configuration.",
      "type": "object",
      "properties": {
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string",
          "format": "int64"
        },
        "enableAnonymousUser": {
          "type": "boolean",
          "description": "Whether to enable anonymous user."
        },
        "legacyResetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Legacy reset password email template."
        },
        "resetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Reset password email template."
        },
        "authorizedDomains": {
          "items": {
            "type": "string"
          },
          "description": "Authorized domains for widget redirect.",
          "type": "array"
        },
        "changeEmailTemplate": {
          "description": "Change email template.",
          "$ref": "EmailTemplate"
        },
        "apiKey": {
          "description": "Browser API key, needed when making http request to Apiary.",
          "type": "string"
        },
        "verifyEmailTemplate": {
          "$ref": "EmailTemplate",
          "description": "Verify email template."
        },
        "idpConfig": {
          "description": "Oauth2 provider configuration.",
          "type": "array",
          "items": {
            "$ref": "IdpConfig"
          }
        },
        "allowPasswordUser": {
          "description": "Whether to allow password user sign in or sign up.",
          "type": "boolean"
        },
        "useEmailSending": {
          "type": "boolean",
          "description": "Whether to use email sending provided by Firebear."
        }
      },
      "id": "IdentitytoolkitRelyingpartySetProjectConfigRequest"
    },
    "IdentitytoolkitRelyingpartyVerifyPasswordRequest": {
      "id": "IdentitytoolkitRelyingpartyVerifyPasswordRequest",
      "properties": {
        "captchaResponse": {
          "description": "Response to the captcha.",
          "type": "string"
        },
        "pendingIdToken": {
          "description": "The GITKit token for the non-trusted IDP, which is to be confirmed by the user.",
          "type": "string"
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "password": {
          "type": "string",
          "description": "The password inputed by the user."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "tenantProjectNumber": {
          "description": "Tenant project number to be used for idp discovery.",
          "type": "string",
          "format": "uint64"
        },
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string",
          "format": "int64"
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        },
        "tenantId": {
          "type": "string",
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."
        }
      },
      "description": "Request to verify the password.",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyCreateAuthUriRequest": {
      "description": "Request to get the IDP authentication URL.",
      "properties": {
        "customParameter": {
          "description": "The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.",
          "additionalProperties": {
            "type": "string",
            "description": "The customized query parameter."
          },
          "type": "object"
        },
        "sessionId": {
          "description": "The session_id passed by client.",
          "type": "string"
        },
        "oauthConsumerKey": {
          "type": "string",
          "description": "The developer's consumer key for OpenId OAuth Extension"
        },
        "clientId": {
          "description": "The relying party OAuth client ID.",
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback."
        },
        "appId": {
          "description": "The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.",
          "type": "string"
        },
        "authFlowType": {
          "description": "Explicitly specify the auth flow type. Currently only support \"CODE_FLOW\" type. The field is only used for Google provider.",
          "type": "string"
        },
        "identifier": {
          "description": "The email or federated ID of the user.",
          "type": "string"
        },
        "tenantId": {
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
          "type": "string"
        },
        "continueUri": {
          "description": "The URI to which the IDP redirects the user after the federated login flow.",
          "type": "string"
        },
        "hostedDomain": {
          "type": "string",
          "description": "The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts."
        },
        "oauthScope": {
          "description": "Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant",
          "type": "string"
        },
        "providerId": {
          "type": "string",
          "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
        },
        "otaApp": {
          "description": "The native app package for OTA installation.",
          "type": "string"
        },
        "openidRealm": {
          "description": "Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set.",
          "type": "string"
        },
        "tenantProjectNumber": {
          "description": "Tenant project number to be used for idp discovery.",
          "type": "string",
          "format": "uint64"
        }
      },
      "id": "IdentitytoolkitRelyingpartyCreateAuthUriRequest",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyGetProjectConfigResponse": {
      "properties": {
        "idpConfig": {
          "type": "array",
          "description": "OAuth2 provider configuration.",
          "items": {
            "$ref": "IdpConfig"
          }
        },
        "verifyEmailTemplate": {
          "description": "Verify email template.",
          "$ref": "EmailTemplate"
        },
        "useEmailSending": {
          "description": "Whether to use email sending provided by Firebear.",
          "type": "boolean"
        },
        "resetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Reset password email template."
        },
        "apiKey": {
          "description": "Browser API key, needed when making http request to Apiary.",
          "type": "string"
        },
        "projectId": {
          "type": "string",
          "description": "Project ID of the relying party."
        },
        "allowPasswordUser": {
          "description": "Whether to allow password user sign in or sign up.",
          "type": "boolean"
        },
        "enableAnonymousUser": {
          "type": "boolean",
          "description": "Whether anonymous user is enabled."
        },
        "authorizedDomains": {
          "items": {
            "type": "string"
          },
          "description": "Authorized domains.",
          "type": "array"
        },
        "legacyResetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Legacy reset password email template."
        },
        "changeEmailTemplate": {
          "$ref": "EmailTemplate",
          "description": "Change email template."
        },
        "dynamicLinksDomain": {
          "type": "string"
        }
      },
      "description": "Response of getting the project configuration.",
      "id": "IdentitytoolkitRelyingpartyGetProjectConfigResponse",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartySignupNewUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "localId": {
          "type": "string",
          "description": "Privileged caller can create user with specified user id."
        },
        "phoneNumber": {
          "description": "Privileged caller can create user with specified phone number.",
          "type": "string"
        },
        "emailVerified": {
          "description": "Mark the email as verified or not. Only can be used by service account.",
          "type": "boolean"
        },
        "tenantId": {
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
          "type": "string"
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "password": {
          "description": "The new password of the user.",
          "type": "string"
        },
        "disabled": {
          "description": "Whether to disable the user. Only can be used by service account.",
          "type": "boolean"
        },
        "captchaResponse": {
          "type": "string",
          "description": "Response to the captcha."
        },
        "tenantProjectNumber": {
          "type": "string",
          "format": "uint64",
          "description": "Tenant project number to be used for idp discovery."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartySignupNewUserRequest",
      "description": "Request to signup new user, create anonymous user or anonymous user reauth."
    },
    "UserInfo": {
      "description": "Template for an individual account info.",
      "properties": {
        "phoneNumber": {
          "description": "User's phone number.",
          "type": "string"
        },
        "emailVerified": {
          "description": "Whether the email has been verified.",
          "type": "boolean"
        },
        "salt": {
          "format": "byte",
          "type": "string",
          "description": "The user's password salt."
        },
        "customAttributes": {
          "type": "string",
          "description": "The custom attributes to be set in the user's id token."
        },
        "createdAt": {
          "type": "string",
          "description": "User creation timestamp.",
          "format": "int64"
        },
        "screenName": {
          "description": "User's screen name at Twitter or login name at Github.",
          "type": "string"
        },
        "version": {
          "description": "Version of the user's password.",
          "type": "integer",
          "format": "int32"
        },
        "passwordUpdatedAt": {
          "format": "double",
          "type": "number",
          "description": "The timestamp when the password was last updated."
        },
        "lastLoginAt": {
          "type": "string",
          "format": "int64",
          "description": "last login timestamp."
        },
        "rawPassword": {
          "type": "string",
          "description": "The user's plain text password."
        },
        "passwordHash": {
          "format": "byte",
          "type": "string",
          "description": "The user's hashed password."
        },
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the user is disabled."
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "providerUserInfo": {
          "description": "The IDP of the user.",
          "type": "array",
          "items": {
            "properties": {
              "displayName": {
                "description": "The user's display name at the IDP.",
                "type": "string"
              },
              "rawId": {
                "description": "User's raw identifier directly returned from IDP.",
                "type": "string"
              },
              "screenName": {
                "type": "string",
                "description": "User's screen name at Twitter or login name at Github."
              },
              "federatedId": {
                "type": "string",
                "description": "User's identifier at IDP."
              },
              "email": {
                "description": "User's email at IDP.",
                "type": "string"
              },
              "photoUrl": {
                "description": "The user's photo url at the IDP.",
                "type": "string"
              },
              "providerId": {
                "type": "string",
                "description": "The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
              },
              "phoneNumber": {
                "description": "User's phone number.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "customAuth": {
          "description": "Whether the user is authenticated by the developer.",
          "type": "boolean"
        },
        "validSince": {
          "format": "int64",
          "type": "string",
          "description": "Timestamp in seconds for valid login token."
        },
        "photoUrl": {
          "description": "The URL of the user profile photo.",
          "type": "string"
        }
      },
      "id": "UserInfo",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartySendVerificationCodeResponse": {
      "description": "Response for Identitytoolkit-SendVerificationCode",
      "type": "object",
      "properties": {
        "sessionInfo": {
          "description": "Encrypted session information",
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartySendVerificationCodeResponse"
    },
    "IdpConfig": {
      "id": "IdpConfig",
      "description": "Template for a single idp configuration.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Whether this IDP is enabled.",
          "type": "boolean"
        },
        "experimentPercent": {
          "type": "integer",
          "description": "Percent of users who will be prompted/redirected federated login for this IDP.",
          "format": "int32"
        },
        "secret": {
          "type": "string",
          "description": "OAuth2 client secret."
        },
        "whitelistedAudiences": {
          "items": {
            "type": "string"
          },
          "description": "Whitelisted client IDs for audience check.",
          "type": "array"
        },
        "provider": {
          "type": "string",
          "description": "OAuth2 provider."
        },
        "clientId": {
          "description": "OAuth2 client ID.",
          "type": "string"
        }
      }
    },
    "IdentitytoolkitRelyingpartyDownloadAccountRequest": {
      "properties": {
        "maxResults": {
          "description": "The max number of results to return in the response.",
          "type": "integer",
          "format": "uint32"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token for the next page. This should be taken from the previous response."
        },
        "targetProjectId": {
          "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential.",
          "type": "string"
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        }
      },
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyDownloadAccountRequest",
      "description": "Request to download user account in batch."
    },
    "DownloadAccountResponse": {
      "description": "Response of downloading accounts in batch.",
      "type": "object",
      "id": "DownloadAccountResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The next page token. To be used in a subsequent request to return the next page of results."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#DownloadAccountResponse\".",
          "default": "identitytoolkit#DownloadAccountResponse",
          "type": "string"
        },
        "users": {
          "items": {
            "$ref": "UserInfo"
          },
          "description": "The user accounts data.",
          "type": "array"
        }
      }
    },
    "IdentitytoolkitRelyingpartySetProjectConfigResponse": {
      "type": "object",
      "description": "Response of setting the project configuration.",
      "id": "IdentitytoolkitRelyingpartySetProjectConfigResponse",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "Project ID of the relying party."
        }
      }
    },
    "SetAccountInfoResponse": {
      "description": "Respone of setting the account information.",
      "type": "object",
      "id": "SetAccountInfoResponse",
      "properties": {
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "newEmail": {
          "description": "The new email the user attempts to change to.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "providerUserInfo": {
          "items": {
            "properties": {
              "federatedId": {
                "type": "string",
                "description": "User's identifier at IDP."
              },
              "displayName": {
                "type": "string",
                "description": "The user's display name at the IDP."
              },
              "providerId": {
                "description": "The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.",
                "type": "string"
              },
              "photoUrl": {
                "type": "string",
                "description": "The user's photo url at the IDP."
              }
            },
            "type": "object"
          },
          "description": "The user's profiles at the associated IdPs.",
          "type": "array"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "If email has been verified."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The Gitkit id token to login the newly sign up user."
        },
        "passwordHash": {
          "format": "byte",
          "type": "string",
          "description": "The user's hashed password."
        },
        "kind": {
          "default": "identitytoolkit#SetAccountInfoResponse",
          "description": "The fixed string \"identitytoolkit#SetAccountInfoResponse\".",
          "type": "string"
        },
        "photoUrl": {
          "type": "string",
          "description": "The photo url of the user."
        },
        "refreshToken": {
          "description": "If idToken is STS id token, then this field will be refresh token.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        }
      }
    },
    "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest": {
      "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest",
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "sessionInfo": {
          "description": "The session info previously returned by IdentityToolkit-SendVerificationCode.",
          "type": "string"
        },
        "verificationProof": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "temporaryProof": {
          "type": "string"
        }
      },
      "description": "Request for Identitytoolkit-VerifyPhoneNumber"
    },
    "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse": {
      "properties": {
        "phoneNumber": {
          "type": "string"
        },
        "expiresIn": {
          "format": "int64",
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "isNewUser": {
          "type": "boolean"
        },
        "temporaryProofExpiresIn": {
          "type": "string",
          "format": "int64"
        },
        "verificationProofExpiresIn": {
          "format": "int64",
          "type": "string"
        },
        "temporaryProof": {
          "type": "string"
        },
        "verificationProof": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "localId": {
          "type": "string"
        }
      },
      "type": "object",
      "description": "Response for Identitytoolkit-VerifyPhoneNumber",
      "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse"
    },
    "VerifyCustomTokenResponse": {
      "id": "VerifyCustomTokenResponse",
      "type": "object",
      "properties": {
        "isNewUser": {
          "type": "boolean",
          "description": "True if it's a new user sign-in, false if it's a returning user."
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "expiresIn": {
          "format": "int64",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "type": "string"
        },
        "idToken": {
          "description": "The GITKit token for authenticated user.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#VerifyCustomTokenResponse\".",
          "default": "identitytoolkit#VerifyCustomTokenResponse"
        }
      },
      "description": "Response from verifying a custom token"
    },
    "IdentitytoolkitRelyingpartySignOutUserResponse": {
      "id": "IdentitytoolkitRelyingpartySignOutUserResponse",
      "properties": {
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        }
      },
      "description": "Response of signing out user.",
      "type": "object"
    },
    "CreateAuthUriResponse": {
      "id": "CreateAuthUriResponse",
      "type": "object",
      "properties": {
        "captchaRequired": {
          "type": "boolean",
          "description": "True if captcha is required."
        },
        "sessionId": {
          "type": "string",
          "description": "Session ID which should be passed in the following verifyAssertion request."
        },
        "registered": {
          "type": "boolean",
          "description": "Whether the user is registered if the identifier is an email."
        },
        "kind": {
          "default": "identitytoolkit#CreateAuthUriResponse",
          "type": "string",
          "description": "The fixed string identitytoolkit#CreateAuthUriResponse\"."
        },
        "signinMethods": {
          "description": "All sign-in methods this user has used.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "allProviders": {
          "items": {
            "type": "string"
          },
          "description": "all providers the user has once used to do federated login",
          "type": "array"
        },
        "authUri": {
          "description": "The URI used by the IDP to authenticate the user.",
          "type": "string"
        },
        "providerId": {
          "type": "string",
          "description": "The provider ID of the auth URI."
        },
        "forExistingProvider": {
          "description": "True if the authUri is for user's existing provider.",
          "type": "boolean"
        }
      },
      "description": "Response of creating the IDP authentication URL."
    },
    "VerifyAssertionResponse": {
      "type": "object",
      "description": "Response of verifying the IDP assertion.",
      "id": "VerifyAssertionResponse",
      "properties": {
        "oauthTokenSecret": {
          "description": "The OAuth1 access token secret.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the user."
        },
        "localId": {
          "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.",
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "description": "The birth date of the IdP account."
        },
        "errorMessage": {
          "description": "Client error code.",
          "type": "string"
        },
        "inputEmail": {
          "description": "It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.",
          "type": "string"
        },
        "photoUrl": {
          "type": "string",
          "description": "The URI of the public accessible profiel picture."
        },
        "language": {
          "type": "string",
          "description": "The language preference of the user."
        },
        "providerId": {
          "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \"providerId\" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \"identifier\" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.",
          "type": "string"
        },
        "oauthAccessToken": {
          "description": "The OAuth2 access token.",
          "type": "string"
        },
        "needConfirmation": {
          "description": "Whether the assertion is from a non-trusted IDP and need account linking confirmation.",
          "type": "boolean"
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "originalEmail": {
          "type": "string",
          "description": "The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email."
        },
        "federatedId": {
          "description": "The unique ID identifies the IdP account.",
          "type": "string"
        },
        "fullName": {
          "type": "string",
          "description": "The full name of the user."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "type": "string",
          "format": "int64"
        },
        "oauthIdToken": {
          "type": "string",
          "description": "The OIDC id token."
        },
        "firstName": {
          "description": "The first name of the user.",
          "type": "string"
        },
        "appInstallationUrl": {
          "description": "URL for OTA app installation.",
          "type": "string"
        },
        "oauthRequestToken": {
          "description": "The user approved request token for the OpenID OAuth extension.",
          "type": "string"
        },
        "rawUserInfo": {
          "type": "string",
          "description": "Raw IDP-returned user info."
        },
        "oauthScope": {
          "description": "The scope for the OpenID OAuth extension.",
          "type": "string"
        },
        "oauthExpireIn": {
          "type": "integer",
          "description": "The lifetime in seconds of the OAuth2 access token.",
          "format": "int32"
        },
        "idToken": {
          "type": "string",
          "description": "The ID token."
        },
        "verifiedProvider": {
          "description": "When action is 'map', contains the idps which can be used for confirmation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastName": {
          "description": "The last name of the user.",
          "type": "string"
        },
        "timeZone": {
          "type": "string",
          "description": "The timezone of the user."
        },
        "context": {
          "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback.",
          "type": "string"
        },
        "action": {
          "description": "The action code.",
          "type": "string"
        },
        "appScheme": {
          "description": "The custom scheme used by mobile app.",
          "type": "string"
        },
        "nickName": {
          "type": "string",
          "description": "The nick name of the user."
        },
        "isNewUser": {
          "type": "boolean",
          "description": "True if it's a new user sign-in, false if it's a returning user."
        },
        "email": {
          "type": "string",
          "description": "The email returned by the IdP. NOTE: The federated login user may not own the email."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "The value is true if the IDP is also the email provider. It means the user owns the email."
        },
        "needEmail": {
          "type": "boolean",
          "description": "Whether need client to supply email to complete the federated login flow."
        },
        "screenName": {
          "type": "string",
          "description": "The screen_name of a Twitter user or the login name at Github."
        },
        "kind": {
          "type": "string",
          "default": "identitytoolkit#VerifyAssertionResponse",
          "description": "The fixed string \"identitytoolkit#VerifyAssertionResponse\"."
        },
        "oauthAuthorizationCode": {
          "type": "string",
          "description": "The OAuth2 authorization code."
        },
        "emailRecycled": {
          "type": "boolean",
          "description": "It's true if the email is recycled."
        }
      }
    },
    "ResetPasswordResponse": {
      "id": "ResetPasswordResponse",
      "properties": {
        "email": {
          "type": "string",
          "description": "The user's email. If the out-of-band code is for email recovery, the user's original email."
        },
        "requestType": {
          "type": "string",
          "description": "The request type."
        },
        "newEmail": {
          "description": "If the out-of-band code is for email recovery, the user's new email.",
          "type": "string"
        },
        "kind": {
          "default": "identitytoolkit#ResetPasswordResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#ResetPasswordResponse\"."
        }
      },
      "description": "Response of resetting the password.",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyEmailLinkSigninRequest": {
      "description": "Request to sign in with email.",
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest",
      "properties": {
        "idToken": {
          "description": "Token for linking flow.",
          "type": "string"
        },
        "oobCode": {
          "description": "The confirmation code.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email address of the user."
        }
      }
    },
    "IdentitytoolkitRelyingpartySetAccountInfoRequest": {
      "type": "object",
      "properties": {
        "emailVerified": {
          "type": "boolean",
          "description": "Mark the email as verified or not."
        },
        "phoneNumber": {
          "description": "Privileged caller can update user with specified phone number.",
          "type": "string"
        },
        "provider": {
          "type": "array",
          "description": "The associated IDPs of the user.",
          "items": {
            "type": "string"
          }
        },
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "customAttributes": {
          "type": "string",
          "description": "The custom attributes to be set in the user's id token."
        },
        "upgradeToFederatedLogin": {
          "type": "boolean",
          "description": "Mark the user to upgrade to federated login."
        },
        "captchaResponse": {
          "type": "string",
          "description": "Response to the captcha."
        },
        "deleteAttribute": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The attributes users request to delete."
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "disableUser": {
          "type": "boolean",
          "description": "Whether to disable the user."
        },
        "password": {
          "type": "string",
          "description": "The new password of the user."
        },
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        },
        "deleteProvider": {
          "description": "The IDPs the user request to delete.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastLoginAt": {
          "description": "Last login timestamp.",
          "format": "int64",
          "type": "string"
        },
        "photoUrl": {
          "type": "string",
          "description": "The photo url of the user."
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        },
        "createdAt": {
          "format": "int64",
          "description": "The timestamp when the account is created.",
          "type": "string"
        },
        "validSince": {
          "description": "Timestamp in seconds for valid login token.",
          "type": "string",
          "format": "int64"
        },
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        },
        "oobCode": {
          "description": "The out-of-band code of the change email request.",
          "type": "string"
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartySetAccountInfoRequest",
      "description": "Request to set the account information."
    }
  },
  "discoveryVersion": "v1",
  "ownerName": "Google",
  "ownerDomain": "google.com",
  "version": "v3",
  "servicePath": "identitytoolkit/v3/relyingparty/",
  "parameters": {
    "alt": {
      "location": "query",
      "type": "string",
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "description": "Data format for the response.",
      "enum": [
        "json"
      ]
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "userIp": {
      "location": "query",
      "description": "Deprecated. Please use quotaUser instead.",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."
    }
  },
  "baseUrl": "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
  "batchPath": "batch/identitytoolkit/v3",
  "revision": "20180723",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/firebase": {
          "description": "View and administer all your Firebase data and settings"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "id": "identitytoolkit:v3",
  "canonicalName": "Identity Toolkit",
  "title": "Google Identity Toolkit API",
  "protocol": "rest",
  "kind": "discovery#restDescription",
  "icons": {
    "x32": "https://www.gstatic.com/images/branding/product/1x/googleg_32dp.png",
    "x16": "https://www.gstatic.com/images/branding/product/1x/googleg_16dp.png"
  },
  "description": "Help the third party sites to implement federated login.",
  "rootUrl": "https://www.googleapis.com/",
  "basePath": "/identitytoolkit/v3/relyingparty/",
  "name": "identitytoolkit",
  "resources": {
    "relyingparty": {
      "methods": {
        "uploadAccount": {
          "httpMethod": "POST",
          "description": "Batch upload existing user accounts.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyUploadAccountRequest"
          },
          "path": "uploadAccount",
          "id": "identitytoolkit.relyingparty.uploadAccount",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "response": {
            "$ref": "UploadAccountResponse"
          }
        },
        "signupNewUser": {
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySignupNewUserRequest"
          },
          "httpMethod": "POST",
          "path": "signupNewUser",
          "response": {
            "$ref": "SignupNewUserResponse"
          },
          "id": "identitytoolkit.relyingparty.signupNewUser",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Signup new user."
        },
        "verifyCustomToken": {
          "id": "identitytoolkit.relyingparty.verifyCustomToken",
          "httpMethod": "POST",
          "response": {
            "$ref": "VerifyCustomTokenResponse"
          },
          "description": "Verifies the developer asserted ID token.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest"
          },
          "path": "verifyCustomToken"
        },
        "getProjectConfig": {
          "description": "Get project configuration.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "parameters": {
            "projectNumber": {
              "type": "string",
              "description": "GCP project number of the request.",
              "location": "query"
            },
            "delegatedProjectNumber": {
              "type": "string",
              "description": "Delegated GCP project number of the request.",
              "location": "query"
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyGetProjectConfigResponse"
          },
          "id": "identitytoolkit.relyingparty.getProjectConfig",
          "path": "getProjectConfig"
        },
        "getRecaptchaParam": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "getRecaptchaParam",
          "response": {
            "$ref": "GetRecaptchaParamResponse"
          },
          "id": "identitytoolkit.relyingparty.getRecaptchaParam",
          "description": "Get recaptcha secure param.",
          "httpMethod": "GET"
        },
        "signOutUser": {
          "id": "identitytoolkit.relyingparty.signOutUser",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySignOutUserRequest"
          },
          "httpMethod": "POST",
          "description": "Sign out user.",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySignOutUserResponse"
          },
          "path": "signOutUser"
        },
        "getAccountInfo": {
          "id": "identitytoolkit.relyingparty.getAccountInfo",
          "path": "getAccountInfo",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyGetAccountInfoRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "description": "Returns the account info.",
          "response": {
            "$ref": "GetAccountInfoResponse"
          }
        },
        "verifyAssertion": {
          "response": {
            "$ref": "VerifyAssertionResponse"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyAssertionRequest"
          },
          "id": "identitytoolkit.relyingparty.verifyAssertion",
          "description": "Verifies the assertion returned by the IdP.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "verifyAssertion"
        },
        "verifyPassword": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPasswordRequest"
          },
          "path": "verifyPassword",
          "response": {
            "$ref": "VerifyPasswordResponse"
          },
          "description": "Verifies the user entered password.",
          "id": "identitytoolkit.relyingparty.verifyPassword",
          "httpMethod": "POST"
        },
        "verifyPhoneNumber": {
          "path": "verifyPhoneNumber",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest"
          },
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse"
          },
          "description": "Verifies ownership of a phone number and creates/updates the user account accordingly.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.verifyPhoneNumber"
        },
        "downloadAccount": {
          "id": "identitytoolkit.relyingparty.downloadAccount",
          "description": "Batch download user accounts.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyDownloadAccountRequest"
          },
          "path": "downloadAccount",
          "response": {
            "$ref": "DownloadAccountResponse"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ]
        },
        "getPublicKeys": {
          "description": "Get token signing public key.",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyGetPublicKeysResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "publicKeys",
          "httpMethod": "GET",
          "id": "identitytoolkit.relyingparty.getPublicKeys"
        },
        "sendVerificationCode": {
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "sendVerificationCode",
          "description": "Send SMS verification code.",
          "id": "identitytoolkit.relyingparty.sendVerificationCode",
          "httpMethod": "POST"
        },
        "createAuthUri": {
          "response": {
            "$ref": "CreateAuthUriResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyCreateAuthUriRequest"
          },
          "description": "Creates the URI used by the IdP to authenticate the user.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.createAuthUri",
          "path": "createAuthUri"
        },
        "deleteAccount": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "deleteAccount",
          "response": {
            "$ref": "DeleteAccountResponse"
          },
          "description": "Delete user account.",
          "id": "identitytoolkit.relyingparty.deleteAccount",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyDeleteAccountRequest"
          }
        },
        "setAccountInfo": {
          "response": {
            "$ref": "SetAccountInfoResponse"
          },
          "id": "identitytoolkit.relyingparty.setAccountInfo",
          "path": "setAccountInfo",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySetAccountInfoRequest"
          },
          "description": "Set account info for a user.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "emailLinkSignin": {
          "path": "emailLinkSignin",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "description": "Reset password for a user.",
          "id": "identitytoolkit.relyingparty.emailLinkSignin",
          "response": {
            "$ref": "EmailLinkSigninResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest"
          }
        },
        "setProjectConfig": {
          "id": "identitytoolkit.relyingparty.setProjectConfig",
          "path": "setProjectConfig",
          "description": "Set project configuration.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySetProjectConfigResponse"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySetProjectConfigRequest"
          }
        },
        "resetPassword": {
          "description": "Reset password for a user.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyResetPasswordRequest"
          },
          "path": "resetPassword",
          "response": {
            "$ref": "ResetPasswordResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "id": "identitytoolkit.relyingparty.resetPassword"
        },
        "getOobConfirmationCode": {
          "path": "getOobConfirmationCode",
          "response": {
            "$ref": "GetOobConfirmationCodeResponse"
          },
          "id": "identitytoolkit.relyingparty.getOobConfirmationCode",
          "httpMethod": "POST",
          "request": {
            "$ref": "Relyingparty"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Get a code for user action confirmation."
        }
      }
    }
  },
  "etag": "\"9eZ1uxVRThTDhLJCZHhqs3eQWz4/taa97NuhcHSAt0fUktvGBcH-OqE\"",
  "documentationLink": "https://developers.google.com/identity-toolkit/v3/"
}
