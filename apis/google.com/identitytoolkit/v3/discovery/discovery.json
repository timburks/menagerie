{
  "resources": {
    "relyingparty": {
      "methods": {
        "signupNewUser": {
          "description": "Signup new user.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "SignupNewUserResponse"
          },
          "path": "signupNewUser",
          "id": "identitytoolkit.relyingparty.signupNewUser",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySignupNewUserRequest"
          }
        },
        "uploadAccount": {
          "description": "Batch upload existing user accounts.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "response": {
            "$ref": "UploadAccountResponse"
          },
          "id": "identitytoolkit.relyingparty.uploadAccount",
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyUploadAccountRequest"
          },
          "path": "uploadAccount"
        },
        "deleteAccount": {
          "id": "identitytoolkit.relyingparty.deleteAccount",
          "path": "deleteAccount",
          "description": "Delete user account.",
          "httpMethod": "POST",
          "response": {
            "$ref": "DeleteAccountResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyDeleteAccountRequest"
          }
        },
        "getRecaptchaParam": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "getRecaptchaParam",
          "response": {
            "$ref": "GetRecaptchaParamResponse"
          },
          "description": "Get recaptcha secure param.",
          "id": "identitytoolkit.relyingparty.getRecaptchaParam",
          "httpMethod": "GET"
        },
        "emailLinkSignin": {
          "path": "emailLinkSignin",
          "id": "identitytoolkit.relyingparty.emailLinkSignin",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "EmailLinkSigninResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest"
          },
          "httpMethod": "POST",
          "description": "Reset password for a user."
        },
        "signOutUser": {
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Sign out user.",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySignOutUserResponse"
          },
          "id": "identitytoolkit.relyingparty.signOutUser",
          "path": "signOutUser",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySignOutUserRequest"
          }
        },
        "getProjectConfig": {
          "httpMethod": "GET",
          "path": "getProjectConfig",
          "description": "Get project configuration.",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyGetProjectConfigResponse"
          },
          "parameters": {
            "delegatedProjectNumber": {
              "location": "query",
              "type": "string",
              "description": "Delegated GCP project number of the request."
            },
            "projectNumber": {
              "location": "query",
              "type": "string",
              "description": "GCP project number of the request."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.getProjectConfig"
        },
        "resetPassword": {
          "httpMethod": "POST",
          "description": "Reset password for a user.",
          "path": "resetPassword",
          "id": "identitytoolkit.relyingparty.resetPassword",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyResetPasswordRequest"
          },
          "response": {
            "$ref": "ResetPasswordResponse"
          }
        },
        "createAuthUri": {
          "path": "createAuthUri",
          "description": "Creates the URI used by the IdP to authenticate the user.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "CreateAuthUriResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyCreateAuthUriRequest"
          },
          "id": "identitytoolkit.relyingparty.createAuthUri",
          "httpMethod": "POST"
        },
        "setProjectConfig": {
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySetProjectConfigResponse"
          },
          "id": "identitytoolkit.relyingparty.setProjectConfig",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySetProjectConfigRequest"
          },
          "httpMethod": "POST",
          "path": "setProjectConfig",
          "description": "Set project configuration."
        },
        "verifyAssertion": {
          "id": "identitytoolkit.relyingparty.verifyAssertion",
          "description": "Verifies the assertion returned by the IdP.",
          "path": "verifyAssertion",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "VerifyAssertionResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyAssertionRequest"
          }
        },
        "verifyPhoneNumber": {
          "description": "Verifies ownership of a phone number and creates/updates the user account accordingly.",
          "id": "identitytoolkit.relyingparty.verifyPhoneNumber",
          "path": "verifyPhoneNumber",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest"
          },
          "httpMethod": "POST"
        },
        "getAccountInfo": {
          "path": "getAccountInfo",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "GetAccountInfoResponse"
          },
          "id": "identitytoolkit.relyingparty.getAccountInfo",
          "httpMethod": "POST",
          "description": "Returns the account info.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyGetAccountInfoRequest"
          }
        },
        "downloadAccount": {
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyDownloadAccountRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "description": "Batch download user accounts.",
          "response": {
            "$ref": "DownloadAccountResponse"
          },
          "path": "downloadAccount",
          "id": "identitytoolkit.relyingparty.downloadAccount"
        },
        "sendVerificationCode": {
          "path": "sendVerificationCode",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeRequest"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Send SMS verification code.",
          "id": "identitytoolkit.relyingparty.sendVerificationCode",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeResponse"
          }
        },
        "verifyCustomToken": {
          "response": {
            "$ref": "VerifyCustomTokenResponse"
          },
          "id": "identitytoolkit.relyingparty.verifyCustomToken",
          "path": "verifyCustomToken",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest"
          },
          "httpMethod": "POST",
          "description": "Verifies the developer asserted ID token.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "getOobConfirmationCode": {
          "request": {
            "$ref": "Relyingparty"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Get a code for user action confirmation.",
          "response": {
            "$ref": "GetOobConfirmationCodeResponse"
          },
          "id": "identitytoolkit.relyingparty.getOobConfirmationCode",
          "path": "getOobConfirmationCode",
          "httpMethod": "POST"
        },
        "getPublicKeys": {
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyGetPublicKeysResponse"
          },
          "httpMethod": "GET",
          "path": "publicKeys",
          "id": "identitytoolkit.relyingparty.getPublicKeys",
          "description": "Get token signing public key.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "verifyPassword": {
          "id": "identitytoolkit.relyingparty.verifyPassword",
          "description": "Verifies the user entered password.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "VerifyPasswordResponse"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPasswordRequest"
          },
          "path": "verifyPassword"
        },
        "setAccountInfo": {
          "response": {
            "$ref": "SetAccountInfoResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySetAccountInfoRequest"
          },
          "httpMethod": "POST",
          "path": "setAccountInfo",
          "id": "identitytoolkit.relyingparty.setAccountInfo",
          "description": "Set account info for a user.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        }
      }
    }
  },
  "discoveryVersion": "v1",
  "revision": "20180723",
  "name": "identitytoolkit",
  "ownerName": "Google",
  "version": "v3",
  "documentationLink": "https://developers.google.com/identity-toolkit/v3/",
  "kind": "discovery#restDescription",
  "icons": {
    "x16": "https://www.gstatic.com/images/branding/product/1x/googleg_16dp.png",
    "x32": "https://www.gstatic.com/images/branding/product/1x/googleg_32dp.png"
  },
  "batchPath": "batch/identitytoolkit/v3",
  "canonicalName": "Identity Toolkit",
  "rootUrl": "https://www.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/firebase": {
          "description": "View and administer all your Firebase data and settings"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "baseUrl": "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
  "etag": "\"9eZ1uxVRThTDhLJCZHhqs3eQWz4/taa97NuhcHSAt0fUktvGBcH-OqE\"",
  "schemas": {
    "IdentitytoolkitRelyingpartyGetPublicKeysResponse": {
      "additionalProperties": {
        "type": "string"
      },
      "id": "IdentitytoolkitRelyingpartyGetPublicKeysResponse",
      "description": "Respone of getting public keys.",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyDeleteAccountRequest": {
      "id": "IdentitytoolkitRelyingpartyDeleteAccountRequest",
      "type": "object",
      "description": "Request to delete account.",
      "properties": {
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "delegatedProjectNumber": {
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64"
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token or STS id token of the authenticated user."
        }
      }
    },
    "DownloadAccountResponse": {
      "description": "Response of downloading accounts in batch.",
      "properties": {
        "kind": {
          "default": "identitytoolkit#DownloadAccountResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#DownloadAccountResponse\"."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The next page token. To be used in a subsequent request to return the next page of results."
        },
        "users": {
          "items": {
            "$ref": "UserInfo"
          },
          "type": "array",
          "description": "The user accounts data."
        }
      },
      "type": "object",
      "id": "DownloadAccountResponse"
    },
    "SetAccountInfoResponse": {
      "id": "SetAccountInfoResponse",
      "description": "Respone of setting the account information.",
      "properties": {
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "refreshToken": {
          "description": "If idToken is STS id token, then this field will be refresh token.",
          "type": "string"
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#SetAccountInfoResponse\".",
          "default": "identitytoolkit#SetAccountInfoResponse",
          "type": "string"
        },
        "providerUserInfo": {
          "description": "The user's profiles at the associated IdPs.",
          "items": {
            "properties": {
              "displayName": {
                "type": "string",
                "description": "The user's display name at the IDP."
              },
              "federatedId": {
                "type": "string",
                "description": "User's identifier at IDP."
              },
              "photoUrl": {
                "type": "string",
                "description": "The user's photo url at the IDP."
              },
              "providerId": {
                "type": "string",
                "description": "The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "emailVerified": {
          "description": "If email has been verified.",
          "type": "boolean"
        },
        "newEmail": {
          "type": "string",
          "description": "The new email the user attempts to change to."
        },
        "passwordHash": {
          "description": "The user's hashed password.",
          "format": "byte",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The Gitkit id token to login the newly sign up user."
        },
        "expiresIn": {
          "format": "int64",
          "type": "string",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds."
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyEmailLinkSigninRequest": {
      "id": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest",
      "description": "Request to sign in with email.",
      "type": "object",
      "properties": {
        "email": {
          "description": "The email address of the user.",
          "type": "string"
        },
        "oobCode": {
          "description": "The confirmation code.",
          "type": "string"
        },
        "idToken": {
          "description": "Token for linking flow.",
          "type": "string"
        }
      }
    },
    "IdentitytoolkitRelyingpartyVerifyAssertionRequest": {
      "properties": {
        "returnRefreshToken": {
          "type": "boolean",
          "description": "Whether to return refresh tokens."
        },
        "autoCreate": {
          "description": "When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist.",
          "type": "boolean"
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "returnSecureToken": {
          "description": "Whether return sts id token and refresh token instead of gitkit token.",
          "type": "boolean"
        },
        "tenantId": {
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "tenantProjectNumber": {
          "format": "uint64",
          "type": "string",
          "description": "Tenant project number to be used for idp discovery."
        },
        "postBody": {
          "type": "string",
          "description": "The post body if the request is a HTTP POST."
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        },
        "returnIdpCredential": {
          "type": "boolean",
          "description": "Whether return 200 and IDP credential rather than throw exception when federated id is already linked."
        },
        "sessionId": {
          "type": "string",
          "description": "Session ID, which should match the one in previous createAuthUri request."
        },
        "pendingIdToken": {
          "type": "string",
          "description": "The GITKit token for the non-trusted IDP pending to be confirmed by the user."
        },
        "requestUri": {
          "type": "string",
          "description": "The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP."
        }
      },
      "id": "IdentitytoolkitRelyingpartyVerifyAssertionRequest",
      "description": "Request to verify the IDP assertion.",
      "type": "object"
    },
    "DeleteAccountResponse": {
      "properties": {
        "kind": {
          "description": "The fixed string \"identitytoolkit#DeleteAccountResponse\".",
          "type": "string",
          "default": "identitytoolkit#DeleteAccountResponse"
        }
      },
      "id": "DeleteAccountResponse",
      "type": "object",
      "description": "Respone of deleting account."
    },
    "IdentitytoolkitRelyingpartyUploadAccountRequest": {
      "properties": {
        "delegatedProjectNumber": {
          "type": "string",
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        },
        "memoryCost": {
          "description": "Memory cost for hash calculation. Used by scrypt similar algorithms.",
          "type": "integer",
          "format": "int32"
        },
        "dkLen": {
          "type": "integer",
          "format": "int32"
        },
        "sanityCheck": {
          "description": "If true, backend will do sanity check(including duplicate email and federated id) when uploading account.",
          "type": "boolean"
        },
        "users": {
          "type": "array",
          "description": "The account info to be stored.",
          "items": {
            "$ref": "UserInfo"
          }
        },
        "saltSeparator": {
          "type": "string",
          "format": "byte",
          "description": "The salt separator."
        },
        "blockSize": {
          "format": "int32",
          "type": "integer"
        },
        "allowOverwrite": {
          "description": "Whether allow overwrite existing account when user local_id exists.",
          "type": "boolean"
        },
        "signerKey": {
          "description": "The key for to hash the password.",
          "type": "string",
          "format": "byte"
        },
        "hashAlgorithm": {
          "description": "The password hash algorithm.",
          "type": "string"
        },
        "cpuMemCost": {
          "description": "The following 4 fields are for standard scrypt algorithm.",
          "type": "integer",
          "format": "int32"
        },
        "parallelization": {
          "format": "int32",
          "type": "integer"
        },
        "targetProjectId": {
          "type": "string",
          "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential."
        },
        "rounds": {
          "description": "Rounds for hash calculation. Used by scrypt and similar algorithms.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "IdentitytoolkitRelyingpartyUploadAccountRequest",
      "type": "object",
      "description": "Request to upload user account in batch."
    },
    "EmailLinkSigninResponse": {
      "properties": {
        "email": {
          "type": "string",
          "description": "The user's email."
        },
        "isNewUser": {
          "type": "boolean",
          "description": "Whether the user is new."
        },
        "expiresIn": {
          "format": "int64",
          "description": "Expiration time of STS id token in seconds.",
          "type": "string"
        },
        "kind": {
          "default": "identitytoolkit#EmailLinkSigninResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#EmailLinkSigninResponse\"."
        },
        "refreshToken": {
          "type": "string",
          "description": "The refresh token for the signed in user."
        },
        "localId": {
          "type": "string",
          "description": "The RP local ID of the user."
        },
        "idToken": {
          "description": "The STS id token to login the newly signed in user.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Response of email signIn.",
      "id": "EmailLinkSigninResponse"
    },
    "IdentitytoolkitRelyingpartySetProjectConfigRequest": {
      "id": "IdentitytoolkitRelyingpartySetProjectConfigRequest",
      "description": "Request to set the project configuration.",
      "properties": {
        "authorizedDomains": {
          "description": "Authorized domains for widget redirect.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowPasswordUser": {
          "type": "boolean",
          "description": "Whether to allow password user sign in or sign up."
        },
        "apiKey": {
          "description": "Browser API key, needed when making http request to Apiary.",
          "type": "string"
        },
        "changeEmailTemplate": {
          "$ref": "EmailTemplate",
          "description": "Change email template."
        },
        "enableAnonymousUser": {
          "type": "boolean",
          "description": "Whether to enable anonymous user."
        },
        "resetPasswordTemplate": {
          "description": "Reset password email template.",
          "$ref": "EmailTemplate"
        },
        "useEmailSending": {
          "description": "Whether to use email sending provided by Firebear.",
          "type": "boolean"
        },
        "idpConfig": {
          "items": {
            "$ref": "IdpConfig"
          },
          "description": "Oauth2 provider configuration.",
          "type": "array"
        },
        "verifyEmailTemplate": {
          "$ref": "EmailTemplate",
          "description": "Verify email template."
        },
        "legacyResetPasswordTemplate": {
          "description": "Legacy reset password email template.",
          "$ref": "EmailTemplate"
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyVerifyPasswordRequest": {
      "properties": {
        "captchaResponse": {
          "description": "Response to the captcha.",
          "type": "string"
        },
        "tenantProjectNumber": {
          "description": "Tenant project number to be used for idp discovery.",
          "format": "uint64",
          "type": "string"
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "tenantId": {
          "type": "string",
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "pendingIdToken": {
          "type": "string",
          "description": "The GITKit token for the non-trusted IDP, which is to be confirmed by the user."
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "returnSecureToken": {
          "description": "Whether return sts id token and refresh token instead of gitkit token.",
          "type": "boolean"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string",
          "format": "int64"
        },
        "password": {
          "type": "string",
          "description": "The password inputed by the user."
        }
      },
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyVerifyPasswordRequest",
      "description": "Request to verify the password."
    },
    "IdentitytoolkitRelyingpartySendVerificationCodeRequest": {
      "type": "object",
      "properties": {
        "recaptchaToken": {
          "description": "Recaptcha solution.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "The phone number to send the verification code to in E.164 format.",
          "type": "string"
        },
        "iosSecret": {
          "description": "Secret delivered to iOS app via APNS.",
          "type": "string"
        },
        "iosReceipt": {
          "description": "Receipt of successful app token validation with APNS.",
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartySendVerificationCodeRequest",
      "description": "Request for Identitytoolkit-SendVerificationCode"
    },
    "VerifyCustomTokenResponse": {
      "properties": {
        "kind": {
          "description": "The fixed string \"identitytoolkit#VerifyCustomTokenResponse\".",
          "type": "string",
          "default": "identitytoolkit#VerifyCustomTokenResponse"
        },
        "expiresIn": {
          "type": "string",
          "format": "int64",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds."
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "idToken": {
          "description": "The GITKit token for authenticated user.",
          "type": "string"
        },
        "isNewUser": {
          "type": "boolean",
          "description": "True if it's a new user sign-in, false if it's a returning user."
        }
      },
      "description": "Response from verifying a custom token",
      "type": "object",
      "id": "VerifyCustomTokenResponse"
    },
    "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse": {
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse",
      "description": "Response for Identitytoolkit-VerifyPhoneNumber",
      "properties": {
        "temporaryProofExpiresIn": {
          "format": "int64",
          "type": "string"
        },
        "temporaryProof": {
          "type": "string"
        },
        "localId": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "expiresIn": {
          "format": "int64",
          "type": "string"
        },
        "isNewUser": {
          "type": "boolean"
        },
        "verificationProofExpiresIn": {
          "format": "int64",
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "verificationProof": {
          "type": "string"
        }
      }
    },
    "IdentitytoolkitRelyingpartySetAccountInfoRequest": {
      "type": "object",
      "id": "IdentitytoolkitRelyingpartySetAccountInfoRequest",
      "properties": {
        "password": {
          "description": "The new password of the user.",
          "type": "string"
        },
        "oobCode": {
          "description": "The out-of-band code of the change email request.",
          "type": "string"
        },
        "captchaResponse": {
          "type": "string",
          "description": "Response to the captcha."
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "deleteAttribute": {
          "description": "The attributes users request to delete.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        },
        "disableUser": {
          "type": "boolean",
          "description": "Whether to disable the user."
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Mark the email as verified or not."
        },
        "validSince": {
          "description": "Timestamp in seconds for valid login token.",
          "format": "int64",
          "type": "string"
        },
        "createdAt": {
          "format": "int64",
          "description": "The timestamp when the account is created.",
          "type": "string"
        },
        "customAttributes": {
          "type": "string",
          "description": "The custom attributes to be set in the user's id token."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "provider": {
          "description": "The associated IDPs of the user.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Privileged caller can update user with specified phone number."
        },
        "upgradeToFederatedLogin": {
          "description": "Mark the user to upgrade to federated login.",
          "type": "boolean"
        },
        "lastLoginAt": {
          "format": "int64",
          "description": "Last login timestamp.",
          "type": "string"
        },
        "deleteProvider": {
          "items": {
            "type": "string"
          },
          "description": "The IDPs the user request to delete.",
          "type": "array"
        },
        "photoUrl": {
          "type": "string",
          "description": "The photo url of the user."
        },
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        }
      },
      "description": "Request to set the account information."
    },
    "IdentitytoolkitRelyingpartySignOutUserResponse": {
      "properties": {
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        }
      },
      "description": "Response of signing out user.",
      "id": "IdentitytoolkitRelyingpartySignOutUserResponse",
      "type": "object"
    },
    "UserInfo": {
      "id": "UserInfo",
      "description": "Template for an individual account info.",
      "type": "object",
      "properties": {
        "customAttributes": {
          "type": "string",
          "description": "The custom attributes to be set in the user's id token."
        },
        "version": {
          "format": "int32",
          "type": "integer",
          "description": "Version of the user's password."
        },
        "providerUserInfo": {
          "description": "The IDP of the user.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "federatedId": {
                "type": "string",
                "description": "User's identifier at IDP."
              },
              "email": {
                "description": "User's email at IDP.",
                "type": "string"
              },
              "rawId": {
                "type": "string",
                "description": "User's raw identifier directly returned from IDP."
              },
              "providerId": {
                "type": "string",
                "description": "The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
              },
              "photoUrl": {
                "type": "string",
                "description": "The user's photo url at the IDP."
              },
              "displayName": {
                "description": "The user's display name at the IDP.",
                "type": "string"
              },
              "screenName": {
                "description": "User's screen name at Twitter or login name at Github.",
                "type": "string"
              },
              "phoneNumber": {
                "description": "User's phone number.",
                "type": "string"
              }
            }
          }
        },
        "passwordUpdatedAt": {
          "type": "number",
          "description": "The timestamp when the password was last updated.",
          "format": "double"
        },
        "validSince": {
          "type": "string",
          "description": "Timestamp in seconds for valid login token.",
          "format": "int64"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Whether the email has been verified."
        },
        "passwordHash": {
          "format": "byte",
          "description": "The user's hashed password.",
          "type": "string"
        },
        "customAuth": {
          "description": "Whether the user is authenticated by the developer.",
          "type": "boolean"
        },
        "createdAt": {
          "description": "User creation timestamp.",
          "type": "string",
          "format": "int64"
        },
        "screenName": {
          "type": "string",
          "description": "User's screen name at Twitter or login name at Github."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the user is disabled."
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "photoUrl": {
          "description": "The URL of the user profile photo.",
          "type": "string"
        },
        "salt": {
          "format": "byte",
          "description": "The user's password salt.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "lastLoginAt": {
          "description": "last login timestamp.",
          "type": "string",
          "format": "int64"
        },
        "rawPassword": {
          "description": "The user's plain text password.",
          "type": "string"
        },
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        }
      }
    },
    "CreateAuthUriResponse": {
      "description": "Response of creating the IDP authentication URL.",
      "properties": {
        "allProviders": {
          "description": "all providers the user has once used to do federated login",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sessionId": {
          "description": "Session ID which should be passed in the following verifyAssertion request.",
          "type": "string"
        },
        "kind": {
          "description": "The fixed string identitytoolkit#CreateAuthUriResponse\".",
          "type": "string",
          "default": "identitytoolkit#CreateAuthUriResponse"
        },
        "authUri": {
          "type": "string",
          "description": "The URI used by the IDP to authenticate the user."
        },
        "signinMethods": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "All sign-in methods this user has used."
        },
        "providerId": {
          "description": "The provider ID of the auth URI.",
          "type": "string"
        },
        "forExistingProvider": {
          "type": "boolean",
          "description": "True if the authUri is for user's existing provider."
        },
        "registered": {
          "description": "Whether the user is registered if the identifier is an email.",
          "type": "boolean"
        },
        "captchaRequired": {
          "type": "boolean",
          "description": "True if captcha is required."
        }
      },
      "id": "CreateAuthUriResponse",
      "type": "object"
    },
    "VerifyPasswordResponse": {
      "id": "VerifyPasswordResponse",
      "properties": {
        "oauthAuthorizationCode": {
          "type": "string",
          "description": "The OAuth2 authorization code."
        },
        "idToken": {
          "description": "The GITKit token for authenticated user.",
          "type": "string"
        },
        "localId": {
          "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.",
          "type": "string"
        },
        "photoUrl": {
          "description": "The URI of the user's photo at IdP",
          "type": "string"
        },
        "oauthExpireIn": {
          "type": "integer",
          "format": "int32",
          "description": "The lifetime in seconds of the OAuth2 access token."
        },
        "email": {
          "type": "string",
          "description": "The email returned by the IdP. NOTE: The federated login user may not own the email."
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64",
          "type": "string"
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#VerifyPasswordResponse\".",
          "type": "string",
          "default": "identitytoolkit#VerifyPasswordResponse"
        },
        "registered": {
          "description": "Whether the email is registered.",
          "type": "boolean"
        },
        "oauthAccessToken": {
          "description": "The OAuth2 access token.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Request of verifying the password."
    },
    "IdentitytoolkitRelyingpartyGetProjectConfigResponse": {
      "properties": {
        "resetPasswordTemplate": {
          "description": "Reset password email template.",
          "$ref": "EmailTemplate"
        },
        "allowPasswordUser": {
          "type": "boolean",
          "description": "Whether to allow password user sign in or sign up."
        },
        "projectId": {
          "description": "Project ID of the relying party.",
          "type": "string"
        },
        "dynamicLinksDomain": {
          "type": "string"
        },
        "apiKey": {
          "description": "Browser API key, needed when making http request to Apiary.",
          "type": "string"
        },
        "useEmailSending": {
          "type": "boolean",
          "description": "Whether to use email sending provided by Firebear."
        },
        "verifyEmailTemplate": {
          "$ref": "EmailTemplate",
          "description": "Verify email template."
        },
        "changeEmailTemplate": {
          "$ref": "EmailTemplate",
          "description": "Change email template."
        },
        "legacyResetPasswordTemplate": {
          "description": "Legacy reset password email template.",
          "$ref": "EmailTemplate"
        },
        "idpConfig": {
          "type": "array",
          "description": "OAuth2 provider configuration.",
          "items": {
            "$ref": "IdpConfig"
          }
        },
        "enableAnonymousUser": {
          "description": "Whether anonymous user is enabled.",
          "type": "boolean"
        },
        "authorizedDomains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Authorized domains."
        }
      },
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyGetProjectConfigResponse",
      "description": "Response of getting the project configuration."
    },
    "SignupNewUserResponse": {
      "properties": {
        "idToken": {
          "type": "string",
          "description": "The Gitkit id token to login the newly sign up user."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "localId": {
          "description": "The RP local ID of the user.",
          "type": "string"
        },
        "refreshToken": {
          "description": "If idToken is STS id token, then this field will be refresh token.",
          "type": "string"
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#SignupNewUserResponse\".",
          "type": "string",
          "default": "identitytoolkit#SignupNewUserResponse"
        }
      },
      "description": "Response of signing up new user, creating anonymous user or anonymous user reauth.",
      "id": "SignupNewUserResponse",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyCreateAuthUriRequest": {
      "description": "Request to get the IDP authentication URL.",
      "id": "IdentitytoolkitRelyingpartyCreateAuthUriRequest",
      "properties": {
        "providerId": {
          "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.",
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback."
        },
        "customParameter": {
          "additionalProperties": {
            "description": "The customized query parameter.",
            "type": "string"
          },
          "description": "The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.",
          "type": "object"
        },
        "identifier": {
          "description": "The email or federated ID of the user.",
          "type": "string"
        },
        "tenantProjectNumber": {
          "description": "Tenant project number to be used for idp discovery.",
          "type": "string",
          "format": "uint64"
        },
        "oauthScope": {
          "description": "Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant",
          "type": "string"
        },
        "sessionId": {
          "type": "string",
          "description": "The session_id passed by client."
        },
        "authFlowType": {
          "description": "Explicitly specify the auth flow type. Currently only support \"CODE_FLOW\" type. The field is only used for Google provider.",
          "type": "string"
        },
        "continueUri": {
          "description": "The URI to which the IDP redirects the user after the federated login flow.",
          "type": "string"
        },
        "clientId": {
          "type": "string",
          "description": "The relying party OAuth client ID."
        },
        "otaApp": {
          "type": "string",
          "description": "The native app package for OTA installation."
        },
        "oauthConsumerKey": {
          "type": "string",
          "description": "The developer's consumer key for OpenId OAuth Extension"
        },
        "appId": {
          "type": "string",
          "description": "The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS."
        },
        "tenantId": {
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
          "type": "string"
        },
        "openidRealm": {
          "description": "Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set.",
          "type": "string"
        },
        "hostedDomain": {
          "description": "The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EmailTemplate": {
      "description": "Template for an email template.",
      "properties": {
        "fromDisplayName": {
          "type": "string",
          "description": "From display name."
        },
        "subject": {
          "description": "Subject of the email.",
          "type": "string"
        },
        "body": {
          "type": "string",
          "description": "Email body."
        },
        "replyTo": {
          "description": "Reply-to address.",
          "type": "string"
        },
        "format": {
          "description": "Email body format.",
          "type": "string"
        },
        "from": {
          "description": "From address of the email.",
          "type": "string"
        }
      },
      "id": "EmailTemplate",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest": {
      "properties": {
        "phoneNumber": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "temporaryProof": {
          "type": "string"
        },
        "verificationProof": {
          "type": "string"
        },
        "sessionInfo": {
          "description": "The session info previously returned by IdentityToolkit-SendVerificationCode.",
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest",
      "description": "Request for Identitytoolkit-VerifyPhoneNumber"
    },
    "IdpConfig": {
      "properties": {
        "whitelistedAudiences": {
          "description": "Whitelisted client IDs for audience check.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientId": {
          "description": "OAuth2 client ID.",
          "type": "string"
        },
        "provider": {
          "type": "string",
          "description": "OAuth2 provider."
        },
        "experimentPercent": {
          "type": "integer",
          "description": "Percent of users who will be prompted/redirected federated login for this IDP.",
          "format": "int32"
        },
        "secret": {
          "description": "OAuth2 client secret.",
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "description": "Whether this IDP is enabled."
        }
      },
      "type": "object",
      "id": "IdpConfig",
      "description": "Template for a single idp configuration."
    },
    "IdentitytoolkitRelyingpartyGetAccountInfoRequest": {
      "id": "IdentitytoolkitRelyingpartyGetAccountInfoRequest",
      "properties": {
        "localId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of local ID's of the users to inquiry."
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Privileged caller can query users by specified phone number.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of emails of the users to inquiry."
        }
      },
      "type": "object",
      "description": "Request to get the account information."
    },
    "GetAccountInfoResponse": {
      "id": "GetAccountInfoResponse",
      "description": "Response of getting account information.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The fixed string \"identitytoolkit#GetAccountInfoResponse\".",
          "type": "string",
          "default": "identitytoolkit#GetAccountInfoResponse"
        },
        "users": {
          "description": "The info of the users.",
          "items": {
            "$ref": "UserInfo"
          },
          "type": "array"
        }
      }
    },
    "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest": {
      "type": "object",
      "description": "Request to verify a custom token",
      "properties": {
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "token": {
          "description": "The custom token to verify",
          "type": "string"
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest"
    },
    "Relyingparty": {
      "id": "Relyingparty",
      "type": "object",
      "properties": {
        "androidMinimumVersion": {
          "type": "string",
          "description": "minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app"
        },
        "androidPackageName": {
          "description": "android package name of the android app to handle the action code",
          "type": "string"
        },
        "captchaResp": {
          "description": "The recaptcha response from the user.",
          "type": "string"
        },
        "newEmail": {
          "description": "The new email if the code is for email change.",
          "type": "string"
        },
        "userIp": {
          "description": "The IP address of the user.",
          "type": "string"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "idToken": {
          "description": "The user's Gitkit login token for email change.",
          "type": "string"
        },
        "continueUrl": {
          "type": "string",
          "description": "The url to continue to the Gitkit app"
        },
        "kind": {
          "default": "identitytoolkit#relyingparty",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#relyingparty\"."
        },
        "androidInstallApp": {
          "description": "whether or not to install the android app on the device where the link is opened",
          "type": "boolean"
        },
        "challenge": {
          "type": "string",
          "description": "The recaptcha challenge presented to the user."
        },
        "iOSBundleId": {
          "description": "the iOS bundle id of iOS app to handle the action code",
          "type": "string"
        },
        "requestType": {
          "type": "string",
          "description": "The request type."
        },
        "iOSAppStoreId": {
          "type": "string",
          "description": "iOS app store id to download the app if it's not already installed"
        },
        "canHandleCodeInApp": {
          "description": "whether or not the app can handle the oob code without first going to web",
          "type": "boolean"
        }
      },
      "description": "Request of getting a code for user confirmation (reset password, change email etc.)"
    },
    "IdentitytoolkitRelyingpartySignupNewUserRequest": {
      "id": "IdentitytoolkitRelyingpartySignupNewUserRequest",
      "type": "object",
      "description": "Request to signup new user, create anonymous user or anonymous user reauth.",
      "properties": {
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "tenantProjectNumber": {
          "description": "Tenant project number to be used for idp discovery.",
          "type": "string",
          "format": "uint64"
        },
        "password": {
          "type": "string",
          "description": "The new password of the user."
        },
        "captchaResponse": {
          "description": "Response to the captcha.",
          "type": "string"
        },
        "disabled": {
          "description": "Whether to disable the user. Only can be used by service account.",
          "type": "boolean"
        },
        "phoneNumber": {
          "description": "Privileged caller can create user with specified phone number.",
          "type": "string"
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "tenantId": {
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
          "type": "string"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        },
        "localId": {
          "type": "string",
          "description": "Privileged caller can create user with specified user id."
        },
        "emailVerified": {
          "description": "Mark the email as verified or not. Only can be used by service account.",
          "type": "boolean"
        }
      }
    },
    "UploadAccountResponse": {
      "id": "UploadAccountResponse",
      "type": "object",
      "properties": {
        "kind": {
          "default": "identitytoolkit#UploadAccountResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#UploadAccountResponse\"."
        },
        "error": {
          "description": "The error encountered while processing the account info.",
          "type": "array",
          "items": {
            "properties": {
              "message": {
                "description": "Detailed error message for the account info.",
                "type": "string"
              },
              "index": {
                "description": "The index of the malformed account, starting from 0.",
                "type": "integer",
                "format": "int32"
              }
            },
            "type": "object"
          }
        }
      },
      "description": "Respone of uploading accounts in batch."
    },
    "IdentitytoolkitRelyingpartySendVerificationCodeResponse": {
      "properties": {
        "sessionInfo": {
          "type": "string",
          "description": "Encrypted session information"
        }
      },
      "description": "Response for Identitytoolkit-SendVerificationCode",
      "id": "IdentitytoolkitRelyingpartySendVerificationCodeResponse",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyDownloadAccountRequest": {
      "id": "IdentitytoolkitRelyingpartyDownloadAccountRequest",
      "type": "object",
      "description": "Request to download user account in batch.",
      "properties": {
        "nextPageToken": {
          "description": "The token for the next page. This should be taken from the previous response.",
          "type": "string"
        },
        "delegatedProjectNumber": {
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64"
        },
        "maxResults": {
          "type": "integer",
          "format": "uint32",
          "description": "The max number of results to return in the response."
        },
        "targetProjectId": {
          "type": "string",
          "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential."
        }
      }
    },
    "ResetPasswordResponse": {
      "id": "ResetPasswordResponse",
      "properties": {
        "requestType": {
          "type": "string",
          "description": "The request type."
        },
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#ResetPasswordResponse\".",
          "default": "identitytoolkit#ResetPasswordResponse"
        },
        "newEmail": {
          "type": "string",
          "description": "If the out-of-band code is for email recovery, the user's new email."
        },
        "email": {
          "description": "The user's email. If the out-of-band code is for email recovery, the user's original email.",
          "type": "string"
        }
      },
      "description": "Response of resetting the password.",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyResetPasswordRequest": {
      "description": "Request to reset the password.",
      "properties": {
        "oobCode": {
          "description": "The confirmation code.",
          "type": "string"
        },
        "oldPassword": {
          "type": "string",
          "description": "The old password inputted by the user."
        },
        "email": {
          "description": "The email address of the user.",
          "type": "string"
        },
        "newPassword": {
          "type": "string",
          "description": "The new password inputted by the user."
        }
      },
      "id": "IdentitytoolkitRelyingpartyResetPasswordRequest",
      "type": "object"
    },
    "VerifyAssertionResponse": {
      "type": "object",
      "id": "VerifyAssertionResponse",
      "properties": {
        "providerId": {
          "type": "string",
          "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \"providerId\" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \"identifier\" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned."
        },
        "verifiedProvider": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "When action is 'map', contains the idps which can be used for confirmation."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#VerifyAssertionResponse\".",
          "default": "identitytoolkit#VerifyAssertionResponse",
          "type": "string"
        },
        "fullName": {
          "type": "string",
          "description": "The full name of the user."
        },
        "timeZone": {
          "type": "string",
          "description": "The timezone of the user."
        },
        "emailRecycled": {
          "type": "boolean",
          "description": "It's true if the email is recycled."
        },
        "displayName": {
          "description": "The display name of the user.",
          "type": "string"
        },
        "photoUrl": {
          "description": "The URI of the public accessible profiel picture.",
          "type": "string"
        },
        "oauthAccessToken": {
          "description": "The OAuth2 access token.",
          "type": "string"
        },
        "oauthRequestToken": {
          "type": "string",
          "description": "The user approved request token for the OpenID OAuth extension."
        },
        "oauthExpireIn": {
          "description": "The lifetime in seconds of the OAuth2 access token.",
          "format": "int32",
          "type": "integer"
        },
        "needConfirmation": {
          "type": "boolean",
          "description": "Whether the assertion is from a non-trusted IDP and need account linking confirmation."
        },
        "nickName": {
          "description": "The nick name of the user.",
          "type": "string"
        },
        "context": {
          "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback.",
          "type": "string"
        },
        "localId": {
          "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.",
          "type": "string"
        },
        "action": {
          "type": "string",
          "description": "The action code."
        },
        "emailVerified": {
          "type": "boolean",
          "description": "The value is true if the IDP is also the email provider. It means the user owns the email."
        },
        "isNewUser": {
          "type": "boolean",
          "description": "True if it's a new user sign-in, false if it's a returning user."
        },
        "idToken": {
          "type": "string",
          "description": "The ID token."
        },
        "oauthAuthorizationCode": {
          "description": "The OAuth2 authorization code.",
          "type": "string"
        },
        "appInstallationUrl": {
          "type": "string",
          "description": "URL for OTA app installation."
        },
        "oauthIdToken": {
          "description": "The OIDC id token.",
          "type": "string"
        },
        "errorMessage": {
          "description": "Client error code.",
          "type": "string"
        },
        "needEmail": {
          "type": "boolean",
          "description": "Whether need client to supply email to complete the federated login flow."
        },
        "dateOfBirth": {
          "description": "The birth date of the IdP account.",
          "type": "string"
        },
        "rawUserInfo": {
          "type": "string",
          "description": "Raw IDP-returned user info."
        },
        "federatedId": {
          "type": "string",
          "description": "The unique ID identifies the IdP account."
        },
        "email": {
          "type": "string",
          "description": "The email returned by the IdP. NOTE: The federated login user may not own the email."
        },
        "appScheme": {
          "type": "string",
          "description": "The custom scheme used by mobile app."
        },
        "oauthTokenSecret": {
          "description": "The OAuth1 access token secret.",
          "type": "string"
        },
        "screenName": {
          "type": "string",
          "description": "The screen_name of a Twitter user or the login name at Github."
        },
        "oauthScope": {
          "description": "The scope for the OpenID OAuth extension.",
          "type": "string"
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "originalEmail": {
          "type": "string",
          "description": "The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email."
        },
        "language": {
          "description": "The language preference of the user.",
          "type": "string"
        },
        "inputEmail": {
          "description": "It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.",
          "type": "string"
        },
        "firstName": {
          "description": "The first name of the user.",
          "type": "string"
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64",
          "type": "string"
        }
      },
      "description": "Response of verifying the IDP assertion."
    },
    "IdentitytoolkitRelyingpartySetProjectConfigResponse": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "description": "Project ID of the relying party."
        }
      },
      "id": "IdentitytoolkitRelyingpartySetProjectConfigResponse",
      "description": "Response of setting the project configuration."
    },
    "GetOobConfirmationCodeResponse": {
      "type": "object",
      "properties": {
        "oobCode": {
          "type": "string",
          "description": "The code to be send to the user."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#GetOobConfirmationCodeResponse\".",
          "default": "identitytoolkit#GetOobConfirmationCodeResponse",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email address that the email is sent to."
        }
      },
      "id": "GetOobConfirmationCodeResponse",
      "description": "Response of getting a code for user confirmation (reset password, change email etc.)."
    },
    "IdentitytoolkitRelyingpartySignOutUserRequest": {
      "id": "IdentitytoolkitRelyingpartySignOutUserRequest",
      "properties": {
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        }
      },
      "type": "object",
      "description": "Request to sign out user."
    },
    "GetRecaptchaParamResponse": {
      "properties": {
        "recaptchaStoken": {
          "description": "The stoken field for the recaptcha widget, used to request captcha challenge.",
          "type": "string"
        },
        "recaptchaSiteKey": {
          "description": "Site key registered at recaptcha.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#GetRecaptchaParamResponse\".",
          "default": "identitytoolkit#GetRecaptchaParamResponse"
        }
      },
      "description": "Response of getting recaptcha param.",
      "id": "GetRecaptchaParamResponse",
      "type": "object"
    }
  },
  "basePath": "/identitytoolkit/v3/relyingparty/",
  "servicePath": "identitytoolkit/v3/relyingparty/",
  "description": "Help the third party sites to implement federated login.",
  "title": "Google Identity Toolkit API",
  "id": "identitytoolkit:v3",
  "parameters": {
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "userIp": {
      "type": "string",
      "description": "Deprecated. Please use quotaUser instead.",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean"
    },
    "alt": {
      "type": "string",
      "description": "Data format for the response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "default": "json",
      "location": "query",
      "enum": [
        "json"
      ]
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    }
  },
  "protocol": "rest"
}
