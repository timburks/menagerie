{
  "resources": {
    "locations": {
      "resources": {
        "questions": {
          "resources": {
            "answers": {
              "methods": {
                "delete": {
                  "flatPath": "v1/locations/{locationsId}/questions/{questionsId}/answers:delete",
                  "path": "v1/{+name}/answers:delete",
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Deletes the answer written by the current user to a question.",
                  "response": {
                    "$ref": "Empty"
                  },
                  "id": "mybusinessqanda.locations.questions.answers.delete",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^locations/[^/]+/questions/[^/]+$",
                      "description": "Required. The name of the question to delete an answer for.",
                      "location": "path",
                      "required": true
                    }
                  }
                },
                "upsert": {
                  "id": "mybusinessqanda.locations.questions.answers.upsert",
                  "description": "Creates an answer or updates the existing answer written by the user for the specified question. A user can only create one answer per question.",
                  "parameters": {
                    "parent": {
                      "description": "Required. The name of the question to write an answer for.",
                      "location": "path",
                      "pattern": "^locations/[^/]+/questions/[^/]+$",
                      "type": "string",
                      "required": true
                    }
                  },
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Answer"
                  },
                  "path": "v1/{+parent}/answers:upsert",
                  "flatPath": "v1/locations/{locationsId}/questions/{questionsId}/answers:upsert",
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "UpsertAnswerRequest"
                  }
                },
                "list": {
                  "response": {
                    "$ref": "ListAnswersResponse"
                  },
                  "path": "v1/{+parent}/answers",
                  "parameters": {
                    "pageSize": {
                      "description": "Optional. How many answers to fetch per page. The default and maximum `page_size` values are 10.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "orderBy": {
                      "type": "string",
                      "location": "query",
                      "description": "Optional. The order to return the answers. Valid options include 'update_time desc' and 'upvote_count desc', which will return the answers sorted descendingly by the requested field. The default sort order is 'update_time desc'."
                    },
                    "pageToken": {
                      "description": "Optional. If specified, the next page of answers is retrieved.",
                      "type": "string",
                      "location": "query"
                    },
                    "parent": {
                      "required": true,
                      "pattern": "^locations/[^/]+/questions/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "description": "Required. The name of the question to fetch answers for."
                    }
                  },
                  "id": "mybusinessqanda.locations.questions.answers.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1/locations/{locationsId}/questions/{questionsId}/answers",
                  "description": "Returns the paginated list of answers for a specified question."
                }
              }
            }
          },
          "methods": {
            "patch": {
              "description": "Updates a specific question written by the current user.",
              "id": "mybusinessqanda.locations.questions.patch",
              "flatPath": "v1/locations/{locationsId}/questions/{questionsId}",
              "httpMethod": "PATCH",
              "path": "v1/{+name}",
              "request": {
                "$ref": "Question"
              },
              "parameters": {
                "updateMask": {
                  "format": "google-fieldmask",
                  "type": "string",
                  "location": "query",
                  "description": "Required. The specific fields to update. Only question text can be updated."
                },
                "name": {
                  "description": "Immutable. The unique name for the question. locations/*/questions/* This field will be ignored if set during question creation.",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "pattern": "^locations/[^/]+/questions/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Question"
              }
            },
            "create": {
              "request": {
                "$ref": "Question"
              },
              "id": "mybusinessqanda.locations.questions.create",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "required": true,
                  "pattern": "^locations/[^/]+/questions$",
                  "type": "string",
                  "location": "path",
                  "description": "Required. The name of the location to write a question for."
                }
              },
              "flatPath": "v1/locations/{locationsId}/questions",
              "response": {
                "$ref": "Question"
              },
              "description": "Adds a question for the specified location.",
              "path": "v1/{+parent}",
              "httpMethod": "POST"
            },
            "delete": {
              "parameterOrder": [
                "name"
              ],
              "flatPath": "v1/locations/{locationsId}/questions/{questionsId}",
              "path": "v1/{+name}",
              "id": "mybusinessqanda.locations.questions.delete",
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "type": "string",
                  "pattern": "^locations/[^/]+/questions/[^/]+$",
                  "location": "path",
                  "required": true,
                  "description": "Required. The name of the question to delete."
                }
              },
              "description": "Deletes a specific question written by the current user.",
              "response": {
                "$ref": "Empty"
              }
            },
            "list": {
              "path": "v1/{+parent}",
              "response": {
                "$ref": "ListQuestionsResponse"
              },
              "httpMethod": "GET",
              "id": "mybusinessqanda.locations.questions.list",
              "parameters": {
                "parent": {
                  "type": "string",
                  "required": true,
                  "description": "Required. The name of the location to fetch questions for.",
                  "pattern": "^locations/[^/]+/questions$",
                  "location": "path"
                },
                "pageToken": {
                  "description": "Optional. If specified, the next page of questions is retrieved.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Optional. How many questions to fetch per page. The default and maximum `page_size` values are 10.",
                  "format": "int32",
                  "location": "query"
                },
                "filter": {
                  "type": "string",
                  "description": "Optional. A filter constraining the questions to return. The only filter currently supported is \"ignore_answered=true\"",
                  "location": "query"
                },
                "orderBy": {
                  "type": "string",
                  "description": "Optional. The order to return the questions. Valid options include 'update_time desc' and 'upvote_count desc', which will return the questions sorted descendingly by the requested field. The default sort order is 'update_time desc'.",
                  "location": "query"
                },
                "answersPerQuestion": {
                  "type": "integer",
                  "description": "Optional. How many answers to fetch per question. The default and maximum `answers_per_question` values are 10.",
                  "location": "query",
                  "format": "int32"
                }
              },
              "description": "Returns the paginated list of questions and some of its answers for a specified location. This operation is only valid if the specified location is verified.",
              "flatPath": "v1/locations/{locationsId}/questions",
              "parameterOrder": [
                "parent"
              ]
            }
          }
        }
      }
    }
  },
  "parameters": {
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "alt": {
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "description": "Data format for response.",
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "schemas": {
    "ListQuestionsResponse": {
      "type": "object",
      "description": "Response message for QuestionsAndAnswers.ListQuestions",
      "id": "ListQuestionsResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "If the number of questions exceeds the requested max page size, this field is populated with a token to fetch the next page of questions on a subsequent call. If there are no more questions, this field is not present in the response."
        },
        "questions": {
          "items": {
            "$ref": "Question"
          },
          "type": "array",
          "description": "The requested questions,"
        },
        "totalSize": {
          "type": "integer",
          "description": "The total number of questions posted for this location across all pages.",
          "format": "int32"
        }
      }
    },
    "UpsertAnswerRequest": {
      "type": "object",
      "description": "Request message for QuestionsAndAnswers.UpsertAnswer",
      "properties": {
        "answer": {
          "$ref": "Answer",
          "description": "Required. The new answer."
        }
      },
      "id": "UpsertAnswerRequest"
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {},
      "type": "object"
    },
    "Answer": {
      "description": "Represents an answer to a question",
      "type": "object",
      "properties": {
        "upvoteCount": {
          "readOnly": true,
          "format": "int32",
          "description": "Output only. The number of upvotes for the answer.",
          "type": "integer"
        },
        "updateTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. The timestamp for when the answer was last modified.",
          "type": "string"
        },
        "text": {
          "type": "string",
          "description": "Required. The text of the answer. It should contain at least one non-whitespace character. The maximum length is 4096 characters."
        },
        "author": {
          "$ref": "Author",
          "description": "Output only. The author of the answer. Will only be set during list operations.",
          "readOnly": true
        },
        "name": {
          "description": "Output only. The unique name for the answer locations/*/questions/*/answers/*",
          "type": "string",
          "readOnly": true
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. The timestamp for when the answer was written. Only retrieved during ListResponse fetching."
        }
      },
      "id": "Answer"
    },
    "ListAnswersResponse": {
      "id": "ListAnswersResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "If the number of answers exceeds the requested max page size, this field is populated with a token to fetch the next page of answers on a subsequent call. If there are no more answers, this field is not present in the response."
        },
        "totalSize": {
          "description": "The total number of answers posted for this question across all pages.",
          "type": "integer",
          "format": "int32"
        },
        "answers": {
          "type": "array",
          "description": "The requested answers.",
          "items": {
            "$ref": "Answer"
          }
        }
      },
      "type": "object",
      "description": "Response message for QuestionsAndAnswers.ListAnswers"
    },
    "Question": {
      "description": "Represents a single question and some of its answers.",
      "properties": {
        "text": {
          "description": "Required. The text of the question. It should contain at least three words and the total length should be greater than or equal to 10 characters. The maximum length is 4096 characters.",
          "type": "string"
        },
        "updateTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The timestamp for when the question was last modified.",
          "format": "google-datetime"
        },
        "createTime": {
          "description": "Output only. The timestamp for when the question was written.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "author": {
          "description": "Output only. The author of the question.",
          "readOnly": true,
          "$ref": "Author"
        },
        "upvoteCount": {
          "type": "integer",
          "readOnly": true,
          "description": "Output only. The number of upvotes for the question.",
          "format": "int32"
        },
        "totalAnswerCount": {
          "readOnly": true,
          "description": "Output only. The total number of answers posted for this question.",
          "format": "int32",
          "type": "integer"
        },
        "topAnswers": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "Answer"
          },
          "description": "Output only. A list of answers to the question, sorted by upvotes. This may not be a complete list of answers depending on the request parameters (answers_per_question)"
        },
        "name": {
          "type": "string",
          "description": "Immutable. The unique name for the question. locations/*/questions/* This field will be ignored if set during question creation."
        }
      },
      "type": "object",
      "id": "Question"
    },
    "Author": {
      "id": "Author",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The display name of the user"
        },
        "profilePhotoUri": {
          "type": "string",
          "description": "The profile photo URI of the user."
        },
        "type": {
          "enumDescriptions": [
            "This should not be used.",
            "A regular user.",
            "A Local Guide",
            "The owner/manager of the location"
          ],
          "type": "string",
          "enum": [
            "AUTHOR_TYPE_UNSPECIFIED",
            "REGULAR_USER",
            "LOCAL_GUIDE",
            "MERCHANT"
          ],
          "description": "The type of user the author is."
        }
      },
      "description": "Represents the author of a question or answer",
      "type": "object"
    }
  },
  "protocol": "rest",
  "batchPath": "batch",
  "servicePath": "",
  "mtlsRootUrl": "https://mybusinessqanda.mtls.googleapis.com/",
  "ownerName": "Google",
  "fullyEncodeReservedExpansion": true,
  "basePath": "",
  "id": "mybusinessqanda:v1",
  "version_module": true,
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "ownerDomain": "google.com",
  "description": "The My Business Q&A API allows questions and answers to be posted for specific listings. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.",
  "canonicalName": "My Business Q&A",
  "rootUrl": "https://mybusinessqanda.googleapis.com/",
  "revision": "20230227",
  "version": "v1",
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "baseUrl": "https://mybusinessqanda.googleapis.com/",
  "name": "mybusinessqanda",
  "documentationLink": "https://developers.google.com/my-business/",
  "title": "My Business Q&A API"
}
