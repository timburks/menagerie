{
  "parameters": {
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "description": "Data format for response.",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "location": "query",
      "description": "V1 error format."
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    }
  },
  "mtlsRootUrl": "https://streetviewpublish.mtls.googleapis.com/",
  "protocol": "rest",
  "resources": {
    "photos": {
      "methods": {
        "batchUpdate": {
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "path": "v1/photos:batchUpdate",
          "request": {
            "$ref": "BatchUpdatePhotosRequest"
          },
          "response": {
            "$ref": "BatchUpdatePhotosResponse"
          },
          "parameterOrder": [],
          "httpMethod": "POST",
          "id": "streetviewpublish.photos.batchUpdate",
          "description": "Updates the metadata of Photos, such as pose, place association, connections, etc. Changing the pixels of photos is not supported. Note that if BatchUpdatePhotos fails, either critical fields are missing or there is an authentication error. Even if BatchUpdatePhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchUpdatePhotosResponse.results. See UpdatePhoto for specific failures that can occur per photo. Only the fields specified in updateMask field are used. If `updateMask` is not present, the update applies to all fields. The number of UpdatePhotoRequest messages in a BatchUpdatePhotosRequest must not exceed 20. \u003e Note: To update Pose.altitude, Pose.latLngPair has to be filled as well. Otherwise, the request will fail.",
          "parameters": {},
          "flatPath": "v1/photos:batchUpdate"
        },
        "batchGet": {
          "response": {
            "$ref": "BatchGetPhotosResponse"
          },
          "path": "v1/photos:batchGet",
          "id": "streetviewpublish.photos.batchGet",
          "httpMethod": "GET",
          "flatPath": "v1/photos:batchGet",
          "parameters": {
            "languageCode": {
              "type": "string",
              "location": "query",
              "description": "Optional. The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user's language preference for Google services is used."
            },
            "view": {
              "location": "query",
              "enumDescriptions": [
                "Server responses do not include the download URL for the photo bytes. The default value.",
                "Server responses include the download URL for the photo bytes."
              ],
              "description": "Required. Specifies if a download URL for the photo bytes should be returned in the Photo response.",
              "type": "string",
              "enum": [
                "BASIC",
                "INCLUDE_DOWNLOAD_URL"
              ]
            },
            "photoIds": {
              "type": "string",
              "repeated": true,
              "location": "query",
              "description": "Required. IDs of the Photos. For HTTP GET requests, the URL query parameter should be `photoIds=&photoIds=&...`."
            }
          },
          "parameterOrder": [],
          "description": "Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos fails, either critical fields are missing or there is an authentication error. Even if BatchGetPhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchGetPhotosResponse.results. See GetPhoto for specific failures that can occur per photo.",
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ]
        },
        "list": {
          "parameters": {
            "view": {
              "enum": [
                "BASIC",
                "INCLUDE_DOWNLOAD_URL"
              ],
              "enumDescriptions": [
                "Server responses do not include the download URL for the photo bytes. The default value.",
                "Server responses include the download URL for the photo bytes."
              ],
              "type": "string",
              "description": "Required. Specifies if a download URL for the photos bytes should be returned in the Photos response.",
              "location": "query"
            },
            "pageSize": {
              "type": "integer",
              "description": "Optional. The maximum number of photos to return. `pageSize` must be non-negative. If `pageSize` is zero or is not provided, the default page size of 100 is used. The number of photos returned in the response may be less than `pageSize` if the number of photos that belong to the user is less than `pageSize`.",
              "location": "query",
              "format": "int32"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Optional. The nextPageToken value returned from a previous ListPhotos request, if any."
            },
            "languageCode": {
              "type": "string",
              "description": "Optional. The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user's language preference for Google services is used.",
              "location": "query"
            },
            "filter": {
              "description": "Optional. The filter expression. For example: `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`. The filters supported are: `placeId`, `min_latitude`, `max_latitude`, `min_longitude`, and `max_longitude`. See https://google.aip.dev/160 for more information.",
              "type": "string",
              "location": "query"
            }
          },
          "flatPath": "v1/photos",
          "id": "streetviewpublish.photos.list",
          "description": "Lists all the Photos that belong to the user. \u003e Note: Recently created photos that are still being indexed are not returned in the response.",
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "path": "v1/photos",
          "response": {
            "$ref": "ListPhotosResponse"
          },
          "httpMethod": "GET",
          "parameterOrder": []
        },
        "batchDelete": {
          "description": "Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos fails, either critical fields are missing or there is an authentication error. Even if BatchDeletePhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchDeletePhotosResponse.results. See DeletePhoto for specific failures that can occur per photo.",
          "id": "streetviewpublish.photos.batchDelete",
          "httpMethod": "POST",
          "path": "v1/photos:batchDelete",
          "response": {
            "$ref": "BatchDeletePhotosResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "flatPath": "v1/photos:batchDelete",
          "parameterOrder": [],
          "parameters": {},
          "request": {
            "$ref": "BatchDeletePhotosRequest"
          }
        }
      }
    },
    "photo": {
      "methods": {
        "create": {
          "response": {
            "$ref": "Photo"
          },
          "request": {
            "$ref": "Photo"
          },
          "parameters": {},
          "httpMethod": "POST",
          "flatPath": "v1/photo",
          "description": "After the client finishes uploading the photo with the returned UploadRef, CreatePhoto publishes the uploaded Photo to Street View on Google Maps. Currently, the only way to set heading, pitch, and roll in CreatePhoto is through the [Photo Sphere XMP metadata](https://developers.google.com/streetview/spherical-metadata) in the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`, `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose. This method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the request is malformed or if the uploaded photo is not a 360 photo. * google.rpc.Code.NOT_FOUND if the upload reference does not exist. * google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the storage limit.",
          "path": "v1/photo",
          "parameterOrder": [],
          "id": "streetviewpublish.photo.create",
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ]
        },
        "delete": {
          "path": "v1/photo/{photoId}",
          "parameterOrder": [
            "photoId"
          ],
          "response": {
            "$ref": "Empty"
          },
          "flatPath": "v1/photo/{photoId}",
          "httpMethod": "DELETE",
          "id": "streetviewpublish.photo.delete",
          "parameters": {
            "photoId": {
              "description": "Required. ID of the Photo.",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "description": "Deletes a Photo and its metadata. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo. * google.rpc.Code.NOT_FOUND if the photo ID does not exist."
        },
        "get": {
          "parameterOrder": [
            "photoId"
          ],
          "flatPath": "v1/photo/{photoId}",
          "parameters": {
            "photoId": {
              "location": "path",
              "description": "Required. ID of the Photo.",
              "type": "string",
              "required": true
            },
            "view": {
              "type": "string",
              "enumDescriptions": [
                "Server responses do not include the download URL for the photo bytes. The default value.",
                "Server responses include the download URL for the photo bytes."
              ],
              "description": "Required. Specifies if a download URL for the photo bytes should be returned in the Photo response.",
              "location": "query",
              "enum": [
                "BASIC",
                "INCLUDE_DOWNLOAD_URL"
              ]
            },
            "languageCode": {
              "type": "string",
              "location": "query",
              "description": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. If language_code is unspecified, the user's language preference for Google services is used."
            }
          },
          "path": "v1/photo/{photoId}",
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "description": "Gets the metadata of the specified Photo. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested Photo. * google.rpc.Code.NOT_FOUND if the requested Photo does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is still being indexed.",
          "id": "streetviewpublish.photo.get",
          "httpMethod": "GET",
          "response": {
            "$ref": "Photo"
          }
        },
        "startUpload": {
          "request": {
            "$ref": "Empty"
          },
          "flatPath": "v1/photo:startUpload",
          "httpMethod": "POST",
          "parameterOrder": [],
          "description": "Creates an upload session to start uploading photo bytes. The method uses the upload URL of the returned UploadRef to upload the bytes for the Photo. In addition to the photo requirements shown in https://support.google.com/maps/answer/7012050?ref_topic=6275604, the photo must meet the following requirements: * Photo Sphere XMP metadata must be included in the photo metadata. See https://developers.google.com/streetview/spherical-metadata for the required fields. * The pixel size of the photo must meet the size requirements listed in https://support.google.com/maps/answer/7012050?ref_topic=6275604, and the photo must be a full 360 horizontally. After the upload completes, the method uses UploadRef with CreatePhoto to create the Photo object entry.",
          "id": "streetviewpublish.photo.startUpload",
          "path": "v1/photo:startUpload",
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "response": {
            "$ref": "UploadRef"
          },
          "parameters": {}
        },
        "update": {
          "flatPath": "v1/photo/{id}",
          "id": "streetviewpublish.photo.update",
          "parameters": {
            "id": {
              "type": "string",
              "required": true,
              "description": "A unique identifier for a photo.",
              "location": "path"
            },
            "updateMask": {
              "description": "Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.latLngPair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` \u003e Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.",
              "format": "google-fieldmask",
              "type": "string",
              "location": "query"
            }
          },
          "path": "v1/photo/{id}",
          "request": {
            "$ref": "Photo"
          },
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "response": {
            "$ref": "Photo"
          },
          "description": "Updates the metadata of a Photo, such as pose, place association, connections, etc. Changing the pixels of a photo is not supported. Only the fields specified in the updateMask field are used. If `updateMask` is not present, the update applies to all fields. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo. * google.rpc.Code.INVALID_ARGUMENT if the request is malformed. * google.rpc.Code.NOT_FOUND if the requested photo does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is still being indexed.",
          "parameterOrder": [
            "id"
          ]
        }
      }
    },
    "photoSequences": {
      "methods": {
        "list": {
          "response": {
            "$ref": "ListPhotoSequencesResponse"
          },
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "Optional. The nextPageToken value returned from a previous ListPhotoSequences request, if any.",
              "location": "query"
            },
            "filter": {
              "location": "query",
              "description": "Optional. The filter expression. For example: `imagery_type=SPHERICAL`. The filters supported are: `imagery_type`, `processing_state`, `min_latitude`, `max_latitude`, `min_longitude`, `max_longitude`, and `filename_query`. See https://google.aip.dev/160 for more information. Filename queries should sent as a Phrase in order to support multple words and special characters by adding escaped quotes. Ex: filename_query=\"example of a phrase.mp4\"",
              "type": "string"
            },
            "pageSize": {
              "type": "integer",
              "location": "query",
              "format": "int32",
              "description": "Optional. The maximum number of photo sequences to return. `pageSize` must be non-negative. If `pageSize` is zero or is not provided, the default page size of 100 is used. The number of photo sequences returned in the response may be less than `pageSize` if the number of matches is less than `pageSize`. This is currently unimplemented but is in process."
            }
          },
          "flatPath": "v1/photoSequences",
          "id": "streetviewpublish.photoSequences.list",
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "parameterOrder": [],
          "httpMethod": "GET",
          "description": "Lists all the PhotoSequences that belong to the user, in descending CreatePhotoSequence timestamp order.",
          "path": "v1/photoSequences"
        }
      }
    },
    "photoSequence": {
      "methods": {
        "create": {
          "parameterOrder": [],
          "description": "After the client finishes uploading the PhotoSequence with the returned UploadRef, CreatePhotoSequence extracts a sequence of 360 photos from a video or Extensible Device Metadata (XDM, http://www.xdm.org/) to be published to Street View on Google Maps. `CreatePhotoSequence` returns an Operation, with the PhotoSequence Id set in the `Operation.name` field. This method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the request is malformed. * google.rpc.Code.NOT_FOUND if the upload reference does not exist.",
          "flatPath": "v1/photoSequence",
          "parameters": {
            "inputType": {
              "enum": [
                "INPUT_TYPE_UNSPECIFIED",
                "VIDEO",
                "XDM"
              ],
              "enumDescriptions": [
                "Not specified. Server will return google.rpc.Code.INVALID_ARGUMENT.",
                "360 Video.",
                "Extensible Device Metadata, http://www.xdm.org"
              ],
              "description": "Required. The input form of PhotoSequence.",
              "type": "string",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "request": {
            "$ref": "PhotoSequence"
          },
          "response": {
            "$ref": "Operation"
          },
          "httpMethod": "POST",
          "id": "streetviewpublish.photoSequence.create",
          "path": "v1/photoSequence"
        },
        "delete": {
          "parameterOrder": [
            "sequenceId"
          ],
          "description": "Deletes a PhotoSequence and its metadata. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo sequence. * google.rpc.Code.NOT_FOUND if the photo sequence ID does not exist. * google.rpc.Code.FAILED_PRECONDITION if the photo sequence ID is not yet finished processing.",
          "response": {
            "$ref": "Empty"
          },
          "path": "v1/photoSequence/{sequenceId}",
          "id": "streetviewpublish.photoSequence.delete",
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "flatPath": "v1/photoSequence/{sequenceId}",
          "httpMethod": "DELETE",
          "parameters": {
            "sequenceId": {
              "required": true,
              "type": "string",
              "description": "Required. ID of the PhotoSequence.",
              "location": "path"
            }
          }
        },
        "get": {
          "parameters": {
            "view": {
              "type": "string",
              "location": "query",
              "enum": [
                "BASIC",
                "INCLUDE_DOWNLOAD_URL"
              ],
              "enumDescriptions": [
                "Server responses do not include the download URL for the photo bytes. The default value.",
                "Server responses include the download URL for the photo bytes."
              ],
              "description": "Specifies if a download URL for the photo sequence should be returned in `download_url` of individual photos in the PhotoSequence response. \u003e Note: Currently not implemented."
            },
            "sequenceId": {
              "type": "string",
              "required": true,
              "description": "Required. ID of the photo sequence.",
              "location": "path"
            },
            "filter": {
              "type": "string",
              "location": "query",
              "description": "Optional. The filter expression. For example: `published_status=PUBLISHED`. The filters supported are: `published_status`. See https://google.aip.dev/160 for more information."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ],
          "httpMethod": "GET",
          "description": "Gets the metadata of the specified PhotoSequence via the Operation interface. This method returns the following three types of responses: * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` is poulated, which contains a PhotoSequence message. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested PhotoSequence. * google.rpc.Code.NOT_FOUND if the requested PhotoSequence does not exist.",
          "id": "streetviewpublish.photoSequence.get",
          "flatPath": "v1/photoSequence/{sequenceId}",
          "path": "v1/photoSequence/{sequenceId}",
          "parameterOrder": [
            "sequenceId"
          ],
          "response": {
            "$ref": "Operation"
          }
        },
        "startUpload": {
          "parameterOrder": [],
          "id": "streetviewpublish.photoSequence.startUpload",
          "request": {
            "$ref": "Empty"
          },
          "httpMethod": "POST",
          "flatPath": "v1/photoSequence:startUpload",
          "path": "v1/photoSequence:startUpload",
          "parameters": {},
          "response": {
            "$ref": "UploadRef"
          },
          "description": "Creates an upload session to start uploading photo sequence data. The upload URL of the returned UploadRef is used to upload the data for the `photoSequence`. After the upload is complete, the UploadRef is used with CreatePhotoSequence to create the PhotoSequence object entry.",
          "scopes": [
            "https://www.googleapis.com/auth/streetviewpublish"
          ]
        }
      }
    }
  },
  "version_module": true,
  "canonicalName": "Street View Publish",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/streetviewpublish": {
          "description": "Publish and manage your 360 photos on Google Street View"
        }
      }
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "discoveryVersion": "v1",
  "title": "Street View Publish API",
  "rootUrl": "https://streetviewpublish.googleapis.com/",
  "name": "streetviewpublish",
  "schemas": {
    "UploadRef": {
      "properties": {
        "uploadUrl": {
          "description": "An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"",
          "type": "string"
        }
      },
      "type": "object",
      "id": "UploadRef",
      "description": "Upload reference for media files."
    },
    "InsufficientGpsFailureDetails": {
      "type": "object",
      "id": "InsufficientGpsFailureDetails",
      "description": "Details related to ProcessingFailureReason#INSUFFICIENT_GPS.",
      "properties": {
        "gpsPointsFound": {
          "type": "integer",
          "format": "int32",
          "description": "The number of GPS points that were found in the video."
        }
      }
    },
    "PhotoSequence": {
      "type": "object",
      "id": "PhotoSequence",
      "properties": {
        "failureDetails": {
          "$ref": "ProcessingFailureDetails",
          "readOnly": true,
          "description": "Output only. If this sequence has `failure_reason` set, this may contain additional details about the failure."
        },
        "filename": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The filename of the upload. Does not include the directory path. Only available if the sequence was uploaded on a platform that provides the filename."
        },
        "sequenceBounds": {
          "readOnly": true,
          "description": "Output only. A rectangular box that encapsulates every image in this photo sequence.",
          "$ref": "LatLngBounds"
        },
        "gpsSource": {
          "enum": [
            "PHOTO_SEQUENCE",
            "CAMERA_MOTION_METADATA_TRACK"
          ],
          "type": "string",
          "enumDescriptions": [
            "GPS in raw_gps_timeline takes precedence if it exists.",
            "GPS in Camera Motion Metadata Track (CAMM) takes precedence if it exists."
          ],
          "description": "Input only. If both raw_gps_timeline and the Camera Motion Metadata Track (CAMM) contain GPS measurements, indicate which takes precedence."
        },
        "photos": {
          "items": {
            "$ref": "Photo"
          },
          "type": "array",
          "description": "Output only. Photos with increasing timestamps.",
          "readOnly": true
        },
        "distanceMeters": {
          "readOnly": true,
          "format": "double",
          "type": "number",
          "description": "Output only. The computed distance of the photo sequence in meters."
        },
        "captureTimeOverride": {
          "format": "google-datetime",
          "description": "Optional. Absolute time when the photo sequence starts to be captured. If the photo sequence is a video, this is the start time of the video. If this field is populated in input, it overrides the capture time in the video or XDM file.",
          "type": "string"
        },
        "uploadTime": {
          "format": "google-datetime",
          "description": "Output only. The time this photo sequence was created in uSV Store service.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Output only. Unique identifier for the photo sequence. This also acts as a long running operation ID if uploading is performed asynchronously.",
          "type": "string",
          "readOnly": true
        },
        "uploadReference": {
          "description": "Input only. Required when creating photo sequence. The resource name where the bytes of the photo sequence (in the form of video) are uploaded.",
          "$ref": "UploadRef"
        },
        "viewCount": {
          "format": "int64",
          "description": "Output only. The total number of views that all the published images in this PhotoSequence have received.",
          "readOnly": true,
          "type": "string"
        },
        "imu": {
          "description": "Input only. Three axis IMU data for the collection. If this data is too large to put in the request, then it should be put in the CAMM track for the video. This data always takes precedence over the equivalent CAMM data, if it exists.",
          "$ref": "Imu"
        },
        "processingState": {
          "enum": [
            "PROCESSING_STATE_UNSPECIFIED",
            "PENDING",
            "PROCESSING",
            "PROCESSED",
            "FAILED"
          ],
          "enumDescriptions": [
            "The state is unspecified, this is the default value.",
            "The sequence has not yet started processing.",
            "The sequence is currently in processing.",
            "The sequence has finished processing including refining position.",
            "The sequence failed processing. See FailureReason for more details."
          ],
          "readOnly": true,
          "type": "string",
          "description": "Output only. The processing state of this sequence."
        },
        "failureReason": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. If this sequence has processing_state = FAILED, this will contain the reason why it failed. If the processing_state is any other value, this field will be unset.",
          "enum": [
            "PROCESSING_FAILURE_REASON_UNSPECIFIED",
            "LOW_RESOLUTION",
            "DUPLICATE",
            "INSUFFICIENT_GPS",
            "NO_OVERLAP_GPS",
            "INVALID_GPS",
            "FAILED_TO_REFINE_POSITIONS",
            "TAKEDOWN",
            "CORRUPT_VIDEO",
            "INTERNAL",
            "INVALID_VIDEO_FORMAT",
            "INVALID_VIDEO_DIMENSIONS",
            "INVALID_CAPTURE_TIME",
            "GPS_DATA_GAP",
            "JUMPY_GPS",
            "INVALID_IMU",
            "INSUFFICIENT_IMU",
            "INSUFFICIENT_OVERLAP_TIME_SERIES",
            "IMU_DATA_GAP",
            "UNSUPPORTED_CAMERA",
            "NOT_OUTDOORS",
            "INSUFFICIENT_VIDEO_FRAMES",
            "INSUFFICIENT_MOVEMENT"
          ],
          "enumDescriptions": [
            "The failure reason is unspecified, this is the default value.",
            "Video frame's resolution is too small.",
            "This video has been uploaded before.",
            "Too few GPS points.",
            "No overlap between the time frame of GPS track and the time frame of video.",
            "GPS is invalid (e.x. all GPS points are at (0,0))",
            "The sequence of photos could not be accurately located in the world.",
            "The sequence was taken down for policy reasons.",
            "The video file was corrupt or could not be decoded.",
            "A permanent failure in the underlying system occurred.",
            "The video format is invalid or unsupported.",
            "Invalid image aspect ratio found.",
            "Invalid capture time. Timestamps were from the future.",
            "GPS data contains a gap greater than 5 seconds in duration.",
            "GPS data is too erratic to be processed.",
            "IMU (Accelerometer, Gyroscope, etc.) data are not valid. They may be missing required fields (x, y, z or time), may not be formatted correctly, or any other issue that prevents our systems from parsing it.",
            "Too few IMU points.",
            "Insufficient overlap in the time frame between GPS, IMU, and other time series data.",
            "IMU (Accelerometer, Gyroscope, etc.) data contain gaps greater than 0.1 seconds in duration.",
            "The camera is not supported.",
            "Some frames were indoors, which is unsupported.",
            "Not enough video frames.",
            "Not enough moving data."
          ]
        },
        "rawGpsTimeline": {
          "description": "Input only. Raw GPS measurements with increasing timestamps from the device that aren't time synced with each photo. These raw measurements will be used to infer the pose of each frame. Required in input when InputType is VIDEO and raw GPS measurements are not in Camera Motion Metadata Track (CAMM). User can indicate which takes precedence using gps_source if raw GPS measurements are provided in both raw_gps_timeline and Camera Motion Metadata Track (CAMM).",
          "items": {
            "$ref": "Pose"
          },
          "type": "array"
        }
      },
      "description": "A sequence of 360 photos along with metadata."
    },
    "BatchDeletePhotosResponse": {
      "id": "BatchDeletePhotosResponse",
      "properties": {
        "status": {
          "items": {
            "$ref": "Status"
          },
          "type": "array",
          "description": "The status for the operation to delete a single Photo in the batch request."
        }
      },
      "type": "object",
      "description": "Response to batch delete of one or more Photos."
    },
    "GpsDataGapFailureDetails": {
      "id": "GpsDataGapFailureDetails",
      "properties": {
        "gapStartTime": {
          "description": "Relative time (from the start of the video stream) when the gap started.",
          "type": "string",
          "format": "google-duration"
        },
        "gapDuration": {
          "type": "string",
          "description": "The duration of the gap in GPS data that was found.",
          "format": "google-duration"
        }
      },
      "description": "Details related to ProcessingFailureReason#GPS_DATA_GAP. If there are multiple GPS data gaps, only the one with the largest duration is reported here.",
      "type": "object"
    },
    "ImuDataGapFailureDetails": {
      "description": "Details related to ProcessingFailureReason#IMU_DATA_GAP. If there are multiple IMU data gaps, only the one with the largest duration is reported here.",
      "type": "object",
      "properties": {
        "gapStartTime": {
          "description": "Relative time (from the start of the video stream) when the gap started.",
          "format": "google-duration",
          "type": "string"
        },
        "gapDuration": {
          "type": "string",
          "description": "The duration of the gap in IMU data that was found.",
          "format": "google-duration"
        }
      },
      "id": "ImuDataGapFailureDetails"
    },
    "Photo": {
      "properties": {
        "downloadUrl": {
          "description": "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
          "type": "string",
          "readOnly": true
        },
        "uploadTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. Time when the image was uploaded."
        },
        "photoId": {
          "readOnly": true,
          "description": "Required. Output only. Required when updating a photo. Output only when creating a photo. Identifier for the photo, which is unique among all photos in Google.",
          "$ref": "PhotoId"
        },
        "shareLink": {
          "readOnly": true,
          "description": "Output only. The share link for the photo.",
          "type": "string"
        },
        "uploadReference": {
          "description": "Input only. Required when creating a photo. Input only. The resource URL where the photo bytes are uploaded to.",
          "$ref": "UploadRef"
        },
        "transferStatus": {
          "enum": [
            "TRANSFER_STATUS_UNKNOWN",
            "NEVER_TRANSFERRED",
            "PENDING",
            "COMPLETED",
            "REJECTED",
            "EXPIRED",
            "CANCELLED",
            "RECEIVED_VIA_TRANSFER"
          ],
          "type": "string",
          "description": "Output only. Status of rights transfer on this photo.",
          "enumDescriptions": [
            "The status of this transfer is unspecified.",
            "This photo has never been in a transfer.",
            "This photo transfer has been initiated, but the receiver has not yet responded.",
            "The photo transfer has been completed, and this photo has been transferred to the recipient.",
            "The recipient rejected this photo transfer.",
            "The photo transfer expired before the recipient took any action.",
            "The sender cancelled this photo transfer.",
            "The recipient owns this photo due to a rights transfer."
          ],
          "readOnly": true
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "Output only. The thumbnail URL for showing a preview of the given photo.",
          "readOnly": true
        },
        "viewCount": {
          "description": "Output only. View count of the photo.",
          "type": "string",
          "format": "int64",
          "readOnly": true
        },
        "places": {
          "items": {
            "$ref": "Place"
          },
          "description": "Optional. Places where this photo belongs.",
          "type": "array"
        },
        "pose": {
          "$ref": "Pose",
          "description": "Optional. Pose of the photo."
        },
        "captureTime": {
          "type": "string",
          "description": "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
          "format": "google-datetime"
        },
        "mapsPublishStatus": {
          "description": "Output only. Status in Google Maps, whether this photo was published or rejected.",
          "enumDescriptions": [
            "The status of the photo is unknown.",
            "The photo is published to the public through Google Maps.",
            "The photo has been rejected for an unknown reason."
          ],
          "type": "string",
          "enum": [
            "UNSPECIFIED_MAPS_PUBLISH_STATUS",
            "PUBLISHED",
            "REJECTED_UNKNOWN"
          ],
          "readOnly": true
        },
        "connections": {
          "type": "array",
          "items": {
            "$ref": "Connection"
          },
          "description": "Optional. Connections to other photos. A connection represents the link from this photo to another photo."
        }
      },
      "type": "object",
      "id": "Photo",
      "description": "Photo is used to store 360 photos along with photo metadata."
    },
    "Connection": {
      "id": "Connection",
      "properties": {
        "target": {
          "$ref": "PhotoId",
          "description": "Required. The destination of the connection from the containing photo to another photo."
        }
      },
      "description": "A connection is the link from a source photo to a destination photo.",
      "type": "object"
    },
    "ProcessingFailureDetails": {
      "type": "object",
      "properties": {
        "gpsDataGapDetails": {
          "description": "See GpsDataGapFailureDetails.",
          "$ref": "GpsDataGapFailureDetails"
        },
        "imuDataGapDetails": {
          "description": "See ImuDataGapFailureDetails.",
          "$ref": "ImuDataGapFailureDetails"
        },
        "insufficientGpsDetails": {
          "$ref": "InsufficientGpsFailureDetails",
          "description": "See InsufficientGpsFailureDetails."
        },
        "notOutdoorsDetails": {
          "description": "See NotOutdoorsFailureDetails.",
          "$ref": "NotOutdoorsFailureDetails"
        },
        "noOverlapGpsDetails": {
          "$ref": "NoOverlapGpsFailureDetails",
          "description": "See NoOverlapGpsFailureDetails."
        }
      },
      "description": "Additional details to accompany the ProcessingFailureReason enum. This message is always expected to be used in conjunction with ProcessingFailureReason, and the oneof value set in this message should match the FailureReason.",
      "id": "ProcessingFailureDetails"
    },
    "NotOutdoorsFailureDetails": {
      "description": "Details related to ProcessingFailureReason#NOT_OUTDOORS. If there are multiple indoor frames found, the first frame is recorded here.",
      "type": "object",
      "properties": {
        "startTime": {
          "description": "Relative time (from the start of the video stream) when an indoor frame was found.",
          "format": "google-duration",
          "type": "string"
        }
      },
      "id": "NotOutdoorsFailureDetails"
    },
    "PhotoResponse": {
      "type": "object",
      "description": "Response payload for a single Photo in batch operations including BatchGetPhotos and BatchUpdatePhotos.",
      "id": "PhotoResponse",
      "properties": {
        "status": {
          "description": "The status for the operation to get or update a single photo in the batch request.",
          "$ref": "Status"
        },
        "photo": {
          "description": "The Photo resource, if the request was successful.",
          "$ref": "Photo"
        }
      }
    },
    "BatchUpdatePhotosResponse": {
      "description": "Response to batch update of metadata of one or more Photos.",
      "type": "object",
      "properties": {
        "results": {
          "description": "List of results for each individual Photo updated, in the same order as the request.",
          "type": "array",
          "items": {
            "$ref": "PhotoResponse"
          }
        }
      },
      "id": "BatchUpdatePhotosResponse"
    },
    "Place": {
      "description": "Place metadata for an entity.",
      "type": "object",
      "properties": {
        "languageCode": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The language_code that the name is localized with. This should be the language_code specified in the request, but may be a fallback."
        },
        "placeId": {
          "description": "Place identifier, as described in https://developers.google.com/places/place-id.",
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The name of the place, localized to the language_code."
        }
      },
      "id": "Place"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "id": "Status",
      "type": "object"
    },
    "ListPhotosResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "photos": {
          "items": {
            "$ref": "Photo"
          },
          "type": "array",
          "description": "List of photos. The pageSize field in the request determines the number of items returned."
        }
      },
      "id": "ListPhotosResponse",
      "description": "Response to list all photos that belong to a user."
    },
    "PhotoId": {
      "id": "PhotoId",
      "description": "Identifier for a Photo.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique identifier for a photo."
        }
      }
    },
    "Measurement3d": {
      "description": "A Generic 3d measurement sample.",
      "properties": {
        "y": {
          "type": "number",
          "format": "float",
          "description": "The sensor measurement in the y axis."
        },
        "captureTime": {
          "type": "string",
          "description": "The timestamp of the IMU measurement.",
          "format": "google-datetime"
        },
        "z": {
          "description": "The sensor measurement in the z axis.",
          "format": "float",
          "type": "number"
        },
        "x": {
          "description": "The sensor measurement in the x axis.",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object",
      "id": "Measurement3d"
    },
    "BatchUpdatePhotosRequest": {
      "properties": {
        "updatePhotoRequests": {
          "type": "array",
          "description": "Required. List of UpdatePhotoRequests.",
          "items": {
            "$ref": "UpdatePhotoRequest"
          }
        }
      },
      "type": "object",
      "description": "Request to update the metadata of photos. Updating the pixels of photos is not supported.",
      "id": "BatchUpdatePhotosRequest"
    },
    "UpdatePhotoRequest": {
      "id": "UpdatePhotoRequest",
      "properties": {
        "photo": {
          "$ref": "Photo",
          "description": "Required. Photo object containing the new metadata."
        },
        "updateMask": {
          "type": "string",
          "description": "Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.latLngPair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` \u003e Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.",
          "format": "google-fieldmask"
        }
      },
      "type": "object",
      "description": "Request to update the metadata of a Photo. Updating the pixels of a photo is not supported."
    },
    "Operation": {
      "id": "Operation",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "ListPhotoSequencesResponse": {
      "properties": {
        "photoSequences": {
          "type": "array",
          "description": "List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated.",
          "items": {
            "$ref": "Operation"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      },
      "id": "ListPhotoSequencesResponse",
      "description": "Response to list all photo sequences that belong to a user.",
      "type": "object"
    },
    "NoOverlapGpsFailureDetails": {
      "type": "object",
      "id": "NoOverlapGpsFailureDetails",
      "properties": {
        "videoEndTime": {
          "type": "string",
          "description": "End time of video.",
          "format": "google-datetime"
        },
        "videoStartTime": {
          "type": "string",
          "description": "Start time of video.",
          "format": "google-datetime"
        },
        "gpsStartTime": {
          "description": "Time of first recorded GPS point.",
          "format": "google-datetime",
          "type": "string"
        },
        "gpsEndTime": {
          "description": "Time of last recorded GPS point.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "description": "Details related to PhotoSequenceProcessingFailureReason#NO_OVERLAP_GPS."
    },
    "Pose": {
      "type": "object",
      "description": "Raw pose measurement for an entity.",
      "properties": {
        "gpsRecordTimestampUnixEpoch": {
          "format": "google-datetime",
          "type": "string",
          "description": "Time of the GPS record since UTC epoch."
        },
        "latLngPair": {
          "description": "Latitude and longitude pair of the pose, as explained here: https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng When creating a Photo, if the latitude and longitude pair are not provided, the geolocation from the exif header is used. A latitude and longitude pair not provided in the photo or exif header causes the photo process to fail.",
          "$ref": "LatLng"
        },
        "accuracyMeters": {
          "description": "The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.",
          "format": "float",
          "type": "number"
        },
        "level": {
          "description": "Level (the floor in a building) used to configure vertical navigation.",
          "$ref": "Level"
        },
        "roll": {
          "type": "number",
          "description": "Roll, measured in degrees. Value must be \u003e= 0 and \u003c360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.",
          "format": "double"
        },
        "heading": {
          "format": "double",
          "type": "number",
          "description": "The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be \u003e=0 and \u003c360. NaN indicates an unmeasured quantity."
        },
        "altitude": {
          "type": "number",
          "format": "double",
          "description": "Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity."
        },
        "pitch": {
          "format": "double",
          "type": "number",
          "description": "Pitch, measured at the center of the photo in degrees. Value must be \u003e=-90 and \u003c= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity."
        }
      },
      "id": "Pose"
    },
    "Imu": {
      "id": "Imu",
      "description": "IMU data from the device sensors.",
      "properties": {
        "magUt": {
          "type": "array",
          "description": "The magnetometer measurements of the magnetic field in microtesla (uT) with increasing timestamps from devices.",
          "items": {
            "$ref": "Measurement3d"
          }
        },
        "gyroRps": {
          "type": "array",
          "items": {
            "$ref": "Measurement3d"
          },
          "description": "The gyroscope measurements in radians/sec with increasing timestamps from devices."
        },
        "accelMpsps": {
          "items": {
            "$ref": "Measurement3d"
          },
          "type": "array",
          "description": "The accelerometer measurements in meters/sec^2 with increasing timestamps from devices."
        }
      },
      "type": "object"
    },
    "BatchDeletePhotosRequest": {
      "id": "BatchDeletePhotosRequest",
      "properties": {
        "photoIds": {
          "type": "array",
          "description": "Required. IDs of the Photos. HTTP GET requests require the following syntax for the URL query parameter: `photoIds=&photoIds=&...`.",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "description": "Request to delete multiple Photos."
    },
    "Level": {
      "id": "Level",
      "type": "object",
      "description": "Level information containing level number and its corresponding name.",
      "properties": {
        "name": {
          "description": "Required. A name assigned to this Level, restricted to 3 characters. Consider how the elevator buttons would be labeled for this level if there was an elevator.",
          "type": "string"
        },
        "number": {
          "description": "Optional. Floor number, used for ordering. 0 indicates the ground level, 1 indicates the first level above ground level, -1 indicates the first level under ground level. Non-integer values are OK.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "LatLngBounds": {
      "description": "A rectangle in geographical coordinates.",
      "type": "object",
      "properties": {
        "southwest": {
          "$ref": "LatLng",
          "description": "The southwest corner of these bounds."
        },
        "northeast": {
          "description": "The northeast corner of these bounds.",
          "$ref": "LatLng"
        }
      },
      "id": "LatLngBounds"
    },
    "LatLng": {
      "type": "object",
      "properties": {
        "latitude": {
          "format": "double",
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "type": "number"
        }
      },
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
      "id": "LatLng"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "properties": {},
      "id": "Empty",
      "type": "object"
    },
    "BatchGetPhotosResponse": {
      "description": "Response to batch get of Photos.",
      "properties": {
        "results": {
          "description": "List of results for each individual Photo requested, in the same order as the requests in BatchGetPhotos.",
          "items": {
            "$ref": "PhotoResponse"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "BatchGetPhotosResponse"
    }
  },
  "batchPath": "batch",
  "ownerDomain": "google.com",
  "revision": "20230228",
  "documentationLink": "https://developers.google.com/streetview/publish/",
  "servicePath": "",
  "description": "Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images. ",
  "kind": "discovery#restDescription",
  "ownerName": "Google",
  "version": "v1",
  "basePath": "",
  "fullyEncodeReservedExpansion": true,
  "id": "streetviewpublish:v1",
  "baseUrl": "https://streetviewpublish.googleapis.com/"
}
