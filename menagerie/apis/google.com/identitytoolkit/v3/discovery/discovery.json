{
  "revision": "20180723",
  "etag": "\"9eZ1uxVRThTDhLJCZHhqs3eQWz4/taa97NuhcHSAt0fUktvGBcH-OqE\"",
  "version": "v3",
  "discoveryVersion": "v1",
  "title": "Google Identity Toolkit API",
  "resources": {
    "relyingparty": {
      "methods": {
        "getRecaptchaParam": {
          "id": "identitytoolkit.relyingparty.getRecaptchaParam",
          "response": {
            "$ref": "GetRecaptchaParamResponse"
          },
          "description": "Get recaptcha secure param.",
          "path": "getRecaptchaParam",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "GET"
        },
        "sendVerificationCode": {
          "path": "sendVerificationCode",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySendVerificationCodeRequest"
          },
          "description": "Send SMS verification code.",
          "id": "identitytoolkit.relyingparty.sendVerificationCode",
          "httpMethod": "POST"
        },
        "createAuthUri": {
          "description": "Creates the URI used by the IdP to authenticate the user.",
          "path": "createAuthUri",
          "id": "identitytoolkit.relyingparty.createAuthUri",
          "response": {
            "$ref": "CreateAuthUriResponse"
          },
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyCreateAuthUriRequest"
          }
        },
        "getPublicKeys": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Get token signing public key.",
          "path": "publicKeys",
          "httpMethod": "GET",
          "id": "identitytoolkit.relyingparty.getPublicKeys",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyGetPublicKeysResponse"
          }
        },
        "resetPassword": {
          "path": "resetPassword",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.resetPassword",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyResetPasswordRequest"
          },
          "description": "Reset password for a user.",
          "response": {
            "$ref": "ResetPasswordResponse"
          }
        },
        "setAccountInfo": {
          "id": "identitytoolkit.relyingparty.setAccountInfo",
          "description": "Set account info for a user.",
          "httpMethod": "POST",
          "response": {
            "$ref": "SetAccountInfoResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySetAccountInfoRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "setAccountInfo"
        },
        "emailLinkSignin": {
          "description": "Reset password for a user.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "emailLinkSignin",
          "httpMethod": "POST",
          "id": "identitytoolkit.relyingparty.emailLinkSignin",
          "response": {
            "$ref": "EmailLinkSigninResponse"
          },
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest"
          }
        },
        "setProjectConfig": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySetProjectConfigRequest"
          },
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySetProjectConfigResponse"
          },
          "httpMethod": "POST",
          "path": "setProjectConfig",
          "id": "identitytoolkit.relyingparty.setProjectConfig",
          "description": "Set project configuration."
        },
        "getProjectConfig": {
          "description": "Get project configuration.",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "GET",
          "path": "getProjectConfig",
          "id": "identitytoolkit.relyingparty.getProjectConfig",
          "parameters": {
            "projectNumber": {
              "description": "GCP project number of the request.",
              "type": "string",
              "location": "query"
            },
            "delegatedProjectNumber": {
              "location": "query",
              "type": "string",
              "description": "Delegated GCP project number of the request."
            }
          },
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyGetProjectConfigResponse"
          }
        },
        "signupNewUser": {
          "response": {
            "$ref": "SignupNewUserResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySignupNewUserRequest"
          },
          "description": "Signup new user.",
          "id": "identitytoolkit.relyingparty.signupNewUser",
          "httpMethod": "POST",
          "path": "signupNewUser"
        },
        "verifyPhoneNumber": {
          "path": "verifyPhoneNumber",
          "httpMethod": "POST",
          "id": "identitytoolkit.relyingparty.verifyPhoneNumber",
          "response": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse"
          },
          "description": "Verifies ownership of a phone number and creates/updates the user account accordingly.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ]
        },
        "verifyCustomToken": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Verifies the developer asserted ID token.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest"
          },
          "id": "identitytoolkit.relyingparty.verifyCustomToken",
          "path": "verifyCustomToken",
          "httpMethod": "POST",
          "response": {
            "$ref": "VerifyCustomTokenResponse"
          }
        },
        "deleteAccount": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "identitytoolkit.relyingparty.deleteAccount",
          "description": "Delete user account.",
          "httpMethod": "POST",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyDeleteAccountRequest"
          },
          "path": "deleteAccount",
          "response": {
            "$ref": "DeleteAccountResponse"
          }
        },
        "downloadAccount": {
          "response": {
            "$ref": "DownloadAccountResponse"
          },
          "httpMethod": "POST",
          "id": "identitytoolkit.relyingparty.downloadAccount",
          "description": "Batch download user accounts.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyDownloadAccountRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "path": "downloadAccount"
        },
        "getOobConfirmationCode": {
          "response": {
            "$ref": "GetOobConfirmationCodeResponse"
          },
          "path": "getOobConfirmationCode",
          "httpMethod": "POST",
          "id": "identitytoolkit.relyingparty.getOobConfirmationCode",
          "request": {
            "$ref": "Relyingparty"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Get a code for user action confirmation."
        },
        "verifyPassword": {
          "id": "identitytoolkit.relyingparty.verifyPassword",
          "path": "verifyPassword",
          "httpMethod": "POST",
          "response": {
            "$ref": "VerifyPasswordResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyPasswordRequest"
          },
          "description": "Verifies the user entered password."
        },
        "signOutUser": {
          "response": {
            "$ref": "IdentitytoolkitRelyingpartySignOutUserResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "IdentitytoolkitRelyingpartySignOutUserRequest"
          },
          "description": "Sign out user.",
          "id": "identitytoolkit.relyingparty.signOutUser",
          "httpMethod": "POST",
          "path": "signOutUser"
        },
        "uploadAccount": {
          "description": "Batch upload existing user accounts.",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyUploadAccountRequest"
          },
          "id": "identitytoolkit.relyingparty.uploadAccount",
          "path": "uploadAccount",
          "response": {
            "$ref": "UploadAccountResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/firebase"
          ],
          "httpMethod": "POST"
        },
        "getAccountInfo": {
          "httpMethod": "POST",
          "id": "identitytoolkit.relyingparty.getAccountInfo",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "path": "getAccountInfo",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyGetAccountInfoRequest"
          },
          "description": "Returns the account info.",
          "response": {
            "$ref": "GetAccountInfoResponse"
          }
        },
        "verifyAssertion": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Verifies the assertion returned by the IdP.",
          "httpMethod": "POST",
          "response": {
            "$ref": "VerifyAssertionResponse"
          },
          "path": "verifyAssertion",
          "id": "identitytoolkit.relyingparty.verifyAssertion",
          "request": {
            "$ref": "IdentitytoolkitRelyingpartyVerifyAssertionRequest"
          }
        }
      }
    }
  },
  "documentationLink": "https://developers.google.com/identity-toolkit/v3/",
  "icons": {
    "x32": "https://www.gstatic.com/images/branding/product/1x/googleg_32dp.png",
    "x16": "https://www.gstatic.com/images/branding/product/1x/googleg_16dp.png"
  },
  "rootUrl": "https://www.googleapis.com/",
  "id": "identitytoolkit:v3",
  "schemas": {
    "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest": {
      "id": "IdentitytoolkitRelyingpartyVerifyCustomTokenRequest",
      "description": "Request to verify a custom token",
      "properties": {
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        },
        "token": {
          "type": "string",
          "description": "The custom token to verify"
        },
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        },
        "delegatedProjectNumber": {
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64"
        }
      },
      "type": "object"
    },
    "SetAccountInfoResponse": {
      "type": "object",
      "id": "SetAccountInfoResponse",
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#SetAccountInfoResponse\".",
          "type": "string",
          "default": "identitytoolkit#SetAccountInfoResponse"
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "expiresIn": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "idToken": {
          "description": "The Gitkit id token to login the newly sign up user.",
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "If email has been verified."
        },
        "newEmail": {
          "description": "The new email the user attempts to change to.",
          "type": "string"
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "passwordHash": {
          "type": "string",
          "format": "byte",
          "description": "The user's hashed password."
        },
        "providerUserInfo": {
          "items": {
            "type": "object",
            "properties": {
              "providerId": {
                "type": "string",
                "description": "The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
              },
              "displayName": {
                "type": "string",
                "description": "The user's display name at the IDP."
              },
              "federatedId": {
                "description": "User's identifier at IDP.",
                "type": "string"
              },
              "photoUrl": {
                "description": "The user's photo url at the IDP.",
                "type": "string"
              }
            }
          },
          "type": "array",
          "description": "The user's profiles at the associated IdPs."
        }
      },
      "description": "Respone of setting the account information."
    },
    "IdentitytoolkitRelyingpartySendVerificationCodeRequest": {
      "properties": {
        "recaptchaToken": {
          "type": "string",
          "description": "Recaptcha solution."
        },
        "iosSecret": {
          "description": "Secret delivered to iOS app via APNS.",
          "type": "string"
        },
        "iosReceipt": {
          "type": "string",
          "description": "Receipt of successful app token validation with APNS."
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number to send the verification code to in E.164 format."
        }
      },
      "id": "IdentitytoolkitRelyingpartySendVerificationCodeRequest",
      "description": "Request for Identitytoolkit-SendVerificationCode",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyGetAccountInfoRequest": {
      "properties": {
        "phoneNumber": {
          "type": "array",
          "description": "Privileged caller can query users by specified phone number.",
          "items": {
            "type": "string"
          }
        },
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string",
          "format": "int64"
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "localId": {
          "type": "array",
          "description": "The list of local ID's of the users to inquiry.",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "description": "The list of emails of the users to inquiry.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "IdentitytoolkitRelyingpartyGetAccountInfoRequest",
      "type": "object",
      "description": "Request to get the account information."
    },
    "EmailLinkSigninResponse": {
      "properties": {
        "localId": {
          "type": "string",
          "description": "The RP local ID of the user."
        },
        "isNewUser": {
          "description": "Whether the user is new.",
          "type": "boolean"
        },
        "refreshToken": {
          "description": "The refresh token for the signed in user.",
          "type": "string"
        },
        "expiresIn": {
          "description": "Expiration time of STS id token in seconds.",
          "type": "string",
          "format": "int64"
        },
        "email": {
          "description": "The user's email.",
          "type": "string"
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#EmailLinkSigninResponse\".",
          "type": "string",
          "default": "identitytoolkit#EmailLinkSigninResponse"
        },
        "idToken": {
          "type": "string",
          "description": "The STS id token to login the newly signed in user."
        }
      },
      "type": "object",
      "id": "EmailLinkSigninResponse",
      "description": "Response of email signIn."
    },
    "IdentitytoolkitRelyingpartyGetPublicKeysResponse": {
      "id": "IdentitytoolkitRelyingpartyGetPublicKeysResponse",
      "description": "Respone of getting public keys.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "IdentitytoolkitRelyingpartyUploadAccountRequest": {
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyUploadAccountRequest",
      "properties": {
        "sanityCheck": {
          "description": "If true, backend will do sanity check(including duplicate email and federated id) when uploading account.",
          "type": "boolean"
        },
        "allowOverwrite": {
          "type": "boolean",
          "description": "Whether allow overwrite existing account when user local_id exists."
        },
        "users": {
          "items": {
            "$ref": "UserInfo"
          },
          "type": "array",
          "description": "The account info to be stored."
        },
        "cpuMemCost": {
          "format": "int32",
          "type": "integer",
          "description": "The following 4 fields are for standard scrypt algorithm."
        },
        "parallelization": {
          "format": "int32",
          "type": "integer"
        },
        "memoryCost": {
          "format": "int32",
          "type": "integer",
          "description": "Memory cost for hash calculation. Used by scrypt similar algorithms."
        },
        "rounds": {
          "description": "Rounds for hash calculation. Used by scrypt and similar algorithms.",
          "format": "int32",
          "type": "integer"
        },
        "signerKey": {
          "format": "byte",
          "description": "The key for to hash the password.",
          "type": "string"
        },
        "saltSeparator": {
          "type": "string",
          "format": "byte",
          "description": "The salt separator."
        },
        "targetProjectId": {
          "type": "string",
          "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential."
        },
        "hashAlgorithm": {
          "type": "string",
          "description": "The password hash algorithm."
        },
        "delegatedProjectNumber": {
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64"
        },
        "blockSize": {
          "format": "int32",
          "type": "integer"
        },
        "dkLen": {
          "format": "int32",
          "type": "integer"
        }
      },
      "description": "Request to upload user account in batch."
    },
    "GetOobConfirmationCodeResponse": {
      "description": "Response of getting a code for user confirmation (reset password, change email etc.).",
      "properties": {
        "oobCode": {
          "description": "The code to be send to the user.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email address that the email is sent to."
        },
        "kind": {
          "default": "identitytoolkit#GetOobConfirmationCodeResponse",
          "description": "The fixed string \"identitytoolkit#GetOobConfirmationCodeResponse\".",
          "type": "string"
        }
      },
      "type": "object",
      "id": "GetOobConfirmationCodeResponse"
    },
    "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse": {
      "type": "object",
      "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse",
      "properties": {
        "phoneNumber": {
          "type": "string"
        },
        "expiresIn": {
          "format": "int64",
          "type": "string"
        },
        "temporaryProof": {
          "type": "string"
        },
        "verificationProofExpiresIn": {
          "format": "int64",
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "isNewUser": {
          "type": "boolean"
        },
        "verificationProof": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "localId": {
          "type": "string"
        },
        "temporaryProofExpiresIn": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Response for Identitytoolkit-VerifyPhoneNumber"
    },
    "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest": {
      "description": "Request for Identitytoolkit-VerifyPhoneNumber",
      "type": "object",
      "properties": {
        "operation": {
          "type": "string"
        },
        "sessionInfo": {
          "type": "string",
          "description": "The session info previously returned by IdentityToolkit-SendVerificationCode."
        },
        "verificationProof": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "temporaryProof": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest"
    },
    "IdentitytoolkitRelyingpartySetAccountInfoRequest": {
      "properties": {
        "customAttributes": {
          "type": "string",
          "description": "The custom attributes to be set in the user's id token."
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token of the authenticated user."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "deleteProvider": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The IDPs the user request to delete."
        },
        "password": {
          "description": "The new password of the user.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Privileged caller can update user with specified phone number."
        },
        "provider": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The associated IDPs of the user."
        },
        "returnSecureToken": {
          "description": "Whether return sts id token and refresh token instead of gitkit token.",
          "type": "boolean"
        },
        "oobCode": {
          "description": "The out-of-band code of the change email request.",
          "type": "string"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Mark the email as verified or not."
        },
        "upgradeToFederatedLogin": {
          "type": "boolean",
          "description": "Mark the user to upgrade to federated login."
        },
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "captchaResponse": {
          "type": "string",
          "description": "Response to the captcha."
        },
        "deleteAttribute": {
          "items": {
            "type": "string"
          },
          "description": "The attributes users request to delete.",
          "type": "array"
        },
        "validSince": {
          "description": "Timestamp in seconds for valid login token.",
          "format": "int64",
          "type": "string"
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "description": "The timestamp when the account is created."
        },
        "lastLoginAt": {
          "description": "Last login timestamp.",
          "type": "string",
          "format": "int64"
        },
        "disableUser": {
          "description": "Whether to disable the user.",
          "type": "boolean"
        }
      },
      "id": "IdentitytoolkitRelyingpartySetAccountInfoRequest",
      "type": "object",
      "description": "Request to set the account information."
    },
    "CreateAuthUriResponse": {
      "description": "Response of creating the IDP authentication URL.",
      "properties": {
        "authUri": {
          "type": "string",
          "description": "The URI used by the IDP to authenticate the user."
        },
        "kind": {
          "type": "string",
          "default": "identitytoolkit#CreateAuthUriResponse",
          "description": "The fixed string identitytoolkit#CreateAuthUriResponse\"."
        },
        "signinMethods": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "All sign-in methods this user has used."
        },
        "registered": {
          "description": "Whether the user is registered if the identifier is an email.",
          "type": "boolean"
        },
        "captchaRequired": {
          "description": "True if captcha is required.",
          "type": "boolean"
        },
        "allProviders": {
          "type": "array",
          "description": "all providers the user has once used to do federated login",
          "items": {
            "type": "string"
          }
        },
        "sessionId": {
          "type": "string",
          "description": "Session ID which should be passed in the following verifyAssertion request."
        },
        "forExistingProvider": {
          "type": "boolean",
          "description": "True if the authUri is for user's existing provider."
        },
        "providerId": {
          "description": "The provider ID of the auth URI.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CreateAuthUriResponse"
    },
    "IdentitytoolkitRelyingpartySetProjectConfigRequest": {
      "type": "object",
      "id": "IdentitytoolkitRelyingpartySetProjectConfigRequest",
      "description": "Request to set the project configuration.",
      "properties": {
        "delegatedProjectNumber": {
          "type": "string",
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        },
        "verifyEmailTemplate": {
          "description": "Verify email template.",
          "$ref": "EmailTemplate"
        },
        "enableAnonymousUser": {
          "type": "boolean",
          "description": "Whether to enable anonymous user."
        },
        "useEmailSending": {
          "type": "boolean",
          "description": "Whether to use email sending provided by Firebear."
        },
        "legacyResetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Legacy reset password email template."
        },
        "idpConfig": {
          "description": "Oauth2 provider configuration.",
          "items": {
            "$ref": "IdpConfig"
          },
          "type": "array"
        },
        "authorizedDomains": {
          "type": "array",
          "description": "Authorized domains for widget redirect.",
          "items": {
            "type": "string"
          }
        },
        "changeEmailTemplate": {
          "description": "Change email template.",
          "$ref": "EmailTemplate"
        },
        "apiKey": {
          "type": "string",
          "description": "Browser API key, needed when making http request to Apiary."
        },
        "allowPasswordUser": {
          "description": "Whether to allow password user sign in or sign up.",
          "type": "boolean"
        },
        "resetPasswordTemplate": {
          "description": "Reset password email template.",
          "$ref": "EmailTemplate"
        }
      }
    },
    "IdentitytoolkitRelyingpartyDeleteAccountRequest": {
      "id": "IdentitytoolkitRelyingpartyDeleteAccountRequest",
      "description": "Request to delete account.",
      "type": "object",
      "properties": {
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "idToken": {
          "description": "The GITKit token or STS id token of the authenticated user.",
          "type": "string"
        },
        "delegatedProjectNumber": {
          "format": "int64",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "type": "string"
        }
      }
    },
    "IdentitytoolkitRelyingpartyGetProjectConfigResponse": {
      "description": "Response of getting the project configuration.",
      "id": "IdentitytoolkitRelyingpartyGetProjectConfigResponse",
      "properties": {
        "idpConfig": {
          "description": "OAuth2 provider configuration.",
          "type": "array",
          "items": {
            "$ref": "IdpConfig"
          }
        },
        "dynamicLinksDomain": {
          "type": "string"
        },
        "changeEmailTemplate": {
          "description": "Change email template.",
          "$ref": "EmailTemplate"
        },
        "verifyEmailTemplate": {
          "description": "Verify email template.",
          "$ref": "EmailTemplate"
        },
        "authorizedDomains": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Authorized domains."
        },
        "enableAnonymousUser": {
          "type": "boolean",
          "description": "Whether anonymous user is enabled."
        },
        "useEmailSending": {
          "type": "boolean",
          "description": "Whether to use email sending provided by Firebear."
        },
        "apiKey": {
          "description": "Browser API key, needed when making http request to Apiary.",
          "type": "string"
        },
        "resetPasswordTemplate": {
          "$ref": "EmailTemplate",
          "description": "Reset password email template."
        },
        "projectId": {
          "description": "Project ID of the relying party.",
          "type": "string"
        },
        "legacyResetPasswordTemplate": {
          "description": "Legacy reset password email template.",
          "$ref": "EmailTemplate"
        },
        "allowPasswordUser": {
          "description": "Whether to allow password user sign in or sign up.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyResetPasswordRequest": {
      "id": "IdentitytoolkitRelyingpartyResetPasswordRequest",
      "type": "object",
      "description": "Request to reset the password.",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email address of the user."
        },
        "oobCode": {
          "description": "The confirmation code.",
          "type": "string"
        },
        "newPassword": {
          "description": "The new password inputted by the user.",
          "type": "string"
        },
        "oldPassword": {
          "description": "The old password inputted by the user.",
          "type": "string"
        }
      }
    },
    "IdentitytoolkitRelyingpartyVerifyPasswordRequest": {
      "properties": {
        "delegatedProjectNumber": {
          "format": "int64",
          "type": "string",
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration."
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "returnSecureToken": {
          "type": "boolean",
          "description": "Whether return sts id token and refresh token instead of gitkit token."
        },
        "tenantProjectNumber": {
          "description": "Tenant project number to be used for idp discovery.",
          "format": "uint64",
          "type": "string"
        },
        "captchaResponse": {
          "type": "string",
          "description": "Response to the captcha."
        },
        "captchaChallenge": {
          "description": "The captcha challenge.",
          "type": "string"
        },
        "password": {
          "description": "The password inputed by the user.",
          "type": "string"
        },
        "pendingIdToken": {
          "description": "The GITKit token for the non-trusted IDP, which is to be confirmed by the user.",
          "type": "string"
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "tenantId": {
          "type": "string",
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."
        }
      },
      "description": "Request to verify the password.",
      "id": "IdentitytoolkitRelyingpartyVerifyPasswordRequest",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyDownloadAccountRequest": {
      "description": "Request to download user account in batch.",
      "id": "IdentitytoolkitRelyingpartyDownloadAccountRequest",
      "type": "object",
      "properties": {
        "targetProjectId": {
          "type": "string",
          "description": "Specify which project (field value is actually project id) to operate. Only used when provided credential."
        },
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The token for the next page. This should be taken from the previous response.",
          "type": "string"
        },
        "maxResults": {
          "format": "uint32",
          "description": "The max number of results to return in the response.",
          "type": "integer"
        }
      }
    },
    "GetRecaptchaParamResponse": {
      "id": "GetRecaptchaParamResponse",
      "description": "Response of getting recaptcha param.",
      "type": "object",
      "properties": {
        "recaptchaStoken": {
          "description": "The stoken field for the recaptcha widget, used to request captcha challenge.",
          "type": "string"
        },
        "recaptchaSiteKey": {
          "description": "Site key registered at recaptcha.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#GetRecaptchaParamResponse\".",
          "default": "identitytoolkit#GetRecaptchaParamResponse"
        }
      }
    },
    "IdentitytoolkitRelyingpartySetProjectConfigResponse": {
      "type": "object",
      "description": "Response of setting the project configuration.",
      "properties": {
        "projectId": {
          "description": "Project ID of the relying party.",
          "type": "string"
        }
      },
      "id": "IdentitytoolkitRelyingpartySetProjectConfigResponse"
    },
    "IdentitytoolkitRelyingpartyEmailLinkSigninRequest": {
      "id": "IdentitytoolkitRelyingpartyEmailLinkSigninRequest",
      "type": "object",
      "properties": {
        "email": {
          "description": "The email address of the user.",
          "type": "string"
        },
        "oobCode": {
          "description": "The confirmation code.",
          "type": "string"
        },
        "idToken": {
          "type": "string",
          "description": "Token for linking flow."
        }
      },
      "description": "Request to sign in with email."
    },
    "IdentitytoolkitRelyingpartySignOutUserResponse": {
      "id": "IdentitytoolkitRelyingpartySignOutUserResponse",
      "properties": {
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Response of signing out user."
    },
    "UploadAccountResponse": {
      "description": "Respone of uploading accounts in batch.",
      "properties": {
        "error": {
          "type": "array",
          "description": "The error encountered while processing the account info.",
          "items": {
            "properties": {
              "index": {
                "description": "The index of the malformed account, starting from 0.",
                "format": "int32",
                "type": "integer"
              },
              "message": {
                "type": "string",
                "description": "Detailed error message for the account info."
              }
            },
            "type": "object"
          }
        },
        "kind": {
          "default": "identitytoolkit#UploadAccountResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#UploadAccountResponse\"."
        }
      },
      "type": "object",
      "id": "UploadAccountResponse"
    },
    "IdentitytoolkitRelyingpartySignupNewUserRequest": {
      "properties": {
        "tenantProjectNumber": {
          "description": "Tenant project number to be used for idp discovery.",
          "type": "string",
          "format": "uint64"
        },
        "captchaChallenge": {
          "type": "string",
          "description": "The captcha challenge."
        },
        "password": {
          "description": "The new password of the user.",
          "type": "string"
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        },
        "emailVerified": {
          "description": "Mark the email as verified or not. Only can be used by service account.",
          "type": "boolean"
        },
        "disabled": {
          "description": "Whether to disable the user. Only can be used by service account.",
          "type": "boolean"
        },
        "tenantId": {
          "type": "string",
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from."
        },
        "localId": {
          "type": "string",
          "description": "Privileged caller can create user with specified user id."
        },
        "photoUrl": {
          "description": "The photo url of the user.",
          "type": "string"
        },
        "captchaResponse": {
          "description": "Response to the captcha.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Privileged caller can create user with specified phone number."
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        }
      },
      "description": "Request to signup new user, create anonymous user or anonymous user reauth.",
      "id": "IdentitytoolkitRelyingpartySignupNewUserRequest",
      "type": "object"
    },
    "SignupNewUserResponse": {
      "description": "Response of signing up new user, creating anonymous user or anonymous user reauth.",
      "properties": {
        "email": {
          "type": "string",
          "description": "The email of the user."
        },
        "kind": {
          "default": "identitytoolkit#SignupNewUserResponse",
          "description": "The fixed string \"identitytoolkit#SignupNewUserResponse\".",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "idToken": {
          "type": "string",
          "description": "The Gitkit id token to login the newly sign up user."
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "type": "string",
          "format": "int64"
        },
        "localId": {
          "type": "string",
          "description": "The RP local ID of the user."
        }
      },
      "id": "SignupNewUserResponse",
      "type": "object"
    },
    "VerifyCustomTokenResponse": {
      "id": "VerifyCustomTokenResponse",
      "type": "object",
      "properties": {
        "idToken": {
          "description": "The GITKit token for authenticated user.",
          "type": "string"
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "isNewUser": {
          "description": "True if it's a new user sign-in, false if it's a returning user.",
          "type": "boolean"
        },
        "kind": {
          "default": "identitytoolkit#VerifyCustomTokenResponse",
          "type": "string",
          "description": "The fixed string \"identitytoolkit#VerifyCustomTokenResponse\"."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "format": "int64",
          "type": "string"
        }
      },
      "description": "Response from verifying a custom token"
    },
    "DownloadAccountResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The next page token. To be used in a subsequent request to return the next page of results."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#DownloadAccountResponse\".",
          "type": "string",
          "default": "identitytoolkit#DownloadAccountResponse"
        },
        "users": {
          "type": "array",
          "description": "The user accounts data.",
          "items": {
            "$ref": "UserInfo"
          }
        }
      },
      "id": "DownloadAccountResponse",
      "type": "object",
      "description": "Response of downloading accounts in batch."
    },
    "GetAccountInfoResponse": {
      "properties": {
        "kind": {
          "description": "The fixed string \"identitytoolkit#GetAccountInfoResponse\".",
          "default": "identitytoolkit#GetAccountInfoResponse",
          "type": "string"
        },
        "users": {
          "description": "The info of the users.",
          "items": {
            "$ref": "UserInfo"
          },
          "type": "array"
        }
      },
      "description": "Response of getting account information.",
      "id": "GetAccountInfoResponse",
      "type": "object"
    },
    "ResetPasswordResponse": {
      "properties": {
        "requestType": {
          "type": "string",
          "description": "The request type."
        },
        "newEmail": {
          "description": "If the out-of-band code is for email recovery, the user's new email.",
          "type": "string"
        },
        "email": {
          "description": "The user's email. If the out-of-band code is for email recovery, the user's original email.",
          "type": "string"
        },
        "kind": {
          "default": "identitytoolkit#ResetPasswordResponse",
          "description": "The fixed string \"identitytoolkit#ResetPasswordResponse\".",
          "type": "string"
        }
      },
      "id": "ResetPasswordResponse",
      "description": "Response of resetting the password.",
      "type": "object"
    },
    "Relyingparty": {
      "properties": {
        "iOSBundleId": {
          "description": "the iOS bundle id of iOS app to handle the action code",
          "type": "string"
        },
        "requestType": {
          "type": "string",
          "description": "The request type."
        },
        "iOSAppStoreId": {
          "type": "string",
          "description": "iOS app store id to download the app if it's not already installed"
        },
        "androidPackageName": {
          "type": "string",
          "description": "android package name of the android app to handle the action code"
        },
        "idToken": {
          "type": "string",
          "description": "The user's Gitkit login token for email change."
        },
        "newEmail": {
          "type": "string",
          "description": "The new email if the code is for email change."
        },
        "continueUrl": {
          "description": "The url to continue to the Gitkit app",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#relyingparty\".",
          "default": "identitytoolkit#relyingparty"
        },
        "captchaResp": {
          "description": "The recaptcha response from the user.",
          "type": "string"
        },
        "challenge": {
          "type": "string",
          "description": "The recaptcha challenge presented to the user."
        },
        "userIp": {
          "description": "The IP address of the user.",
          "type": "string"
        },
        "canHandleCodeInApp": {
          "type": "boolean",
          "description": "whether or not the app can handle the oob code without first going to web"
        },
        "androidInstallApp": {
          "type": "boolean",
          "description": "whether or not to install the android app on the device where the link is opened"
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "androidMinimumVersion": {
          "description": "minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app",
          "type": "string"
        }
      },
      "id": "Relyingparty",
      "description": "Request of getting a code for user confirmation (reset password, change email etc.)",
      "type": "object"
    },
    "UserInfo": {
      "id": "UserInfo",
      "properties": {
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "providerUserInfo": {
          "items": {
            "properties": {
              "displayName": {
                "type": "string",
                "description": "The user's display name at the IDP."
              },
              "providerId": {
                "description": "The IdP ID. For white listed IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.",
                "type": "string"
              },
              "phoneNumber": {
                "type": "string",
                "description": "User's phone number."
              },
              "email": {
                "type": "string",
                "description": "User's email at IDP."
              },
              "rawId": {
                "description": "User's raw identifier directly returned from IDP.",
                "type": "string"
              },
              "screenName": {
                "type": "string",
                "description": "User's screen name at Twitter or login name at Github."
              },
              "photoUrl": {
                "type": "string",
                "description": "The user's photo url at the IDP."
              },
              "federatedId": {
                "description": "User's identifier at IDP.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "The IDP of the user."
        },
        "email": {
          "description": "The email of the user.",
          "type": "string"
        },
        "emailVerified": {
          "description": "Whether the email has been verified.",
          "type": "boolean"
        },
        "passwordUpdatedAt": {
          "format": "double",
          "description": "The timestamp when the password was last updated.",
          "type": "number"
        },
        "salt": {
          "type": "string",
          "format": "byte",
          "description": "The user's password salt."
        },
        "version": {
          "description": "Version of the user's password.",
          "type": "integer",
          "format": "int32"
        },
        "validSince": {
          "format": "int64",
          "type": "string",
          "description": "Timestamp in seconds for valid login token."
        },
        "lastLoginAt": {
          "format": "int64",
          "type": "string",
          "description": "last login timestamp."
        },
        "customAuth": {
          "description": "Whether the user is authenticated by the developer.",
          "type": "boolean"
        },
        "rawPassword": {
          "description": "The user's plain text password.",
          "type": "string"
        },
        "screenName": {
          "description": "User's screen name at Twitter or login name at Github.",
          "type": "string"
        },
        "customAttributes": {
          "type": "string",
          "description": "The custom attributes to be set in the user's id token."
        },
        "localId": {
          "description": "The local ID of the user.",
          "type": "string"
        },
        "passwordHash": {
          "description": "The user's hashed password.",
          "type": "string",
          "format": "byte"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "description": "User creation timestamp."
        },
        "photoUrl": {
          "type": "string",
          "description": "The URL of the user profile photo."
        },
        "displayName": {
          "type": "string",
          "description": "The name of the user."
        },
        "disabled": {
          "description": "Whether the user is disabled.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "Template for an individual account info."
    },
    "IdentitytoolkitRelyingpartySendVerificationCodeResponse": {
      "description": "Response for Identitytoolkit-SendVerificationCode",
      "properties": {
        "sessionInfo": {
          "type": "string",
          "description": "Encrypted session information"
        }
      },
      "id": "IdentitytoolkitRelyingpartySendVerificationCodeResponse",
      "type": "object"
    },
    "IdentitytoolkitRelyingpartyVerifyAssertionRequest": {
      "properties": {
        "autoCreate": {
          "description": "When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist.",
          "type": "boolean"
        },
        "tenantProjectNumber": {
          "description": "Tenant project number to be used for idp discovery.",
          "type": "string",
          "format": "uint64"
        },
        "returnIdpCredential": {
          "description": "Whether return 200 and IDP credential rather than throw exception when federated id is already linked.",
          "type": "boolean"
        },
        "sessionId": {
          "description": "Session ID, which should match the one in previous createAuthUri request.",
          "type": "string"
        },
        "pendingIdToken": {
          "description": "The GITKit token for the non-trusted IDP pending to be confirmed by the user.",
          "type": "string"
        },
        "idToken": {
          "description": "The GITKit token of the authenticated user.",
          "type": "string"
        },
        "returnRefreshToken": {
          "type": "boolean",
          "description": "Whether to return refresh tokens."
        },
        "delegatedProjectNumber": {
          "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
          "format": "int64",
          "type": "string"
        },
        "postBody": {
          "description": "The post body if the request is a HTTP POST.",
          "type": "string"
        },
        "returnSecureToken": {
          "description": "Whether return sts id token and refresh token instead of gitkit token.",
          "type": "boolean"
        },
        "requestUri": {
          "type": "string",
          "description": "The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP."
        },
        "tenantId": {
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
          "type": "string"
        },
        "instanceId": {
          "type": "string",
          "description": "Instance id token of the app."
        }
      },
      "id": "IdentitytoolkitRelyingpartyVerifyAssertionRequest",
      "type": "object",
      "description": "Request to verify the IDP assertion."
    },
    "IdentitytoolkitRelyingpartyCreateAuthUriRequest": {
      "type": "object",
      "description": "Request to get the IDP authentication URL.",
      "properties": {
        "tenantId": {
          "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
          "type": "string"
        },
        "context": {
          "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback.",
          "type": "string"
        },
        "authFlowType": {
          "type": "string",
          "description": "Explicitly specify the auth flow type. Currently only support \"CODE_FLOW\" type. The field is only used for Google provider."
        },
        "otaApp": {
          "description": "The native app package for OTA installation.",
          "type": "string"
        },
        "continueUri": {
          "type": "string",
          "description": "The URI to which the IDP redirects the user after the federated login flow."
        },
        "customParameter": {
          "description": "The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.",
          "additionalProperties": {
            "type": "string",
            "description": "The customized query parameter."
          },
          "type": "object"
        },
        "appId": {
          "type": "string",
          "description": "The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS."
        },
        "providerId": {
          "type": "string",
          "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."
        },
        "tenantProjectNumber": {
          "description": "Tenant project number to be used for idp discovery.",
          "type": "string",
          "format": "uint64"
        },
        "clientId": {
          "description": "The relying party OAuth client ID.",
          "type": "string"
        },
        "oauthScope": {
          "description": "Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant",
          "type": "string"
        },
        "sessionId": {
          "description": "The session_id passed by client.",
          "type": "string"
        },
        "oauthConsumerKey": {
          "type": "string",
          "description": "The developer's consumer key for OpenId OAuth Extension"
        },
        "hostedDomain": {
          "type": "string",
          "description": "The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts."
        },
        "openidRealm": {
          "description": "Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set.",
          "type": "string"
        },
        "identifier": {
          "type": "string",
          "description": "The email or federated ID of the user."
        }
      },
      "id": "IdentitytoolkitRelyingpartyCreateAuthUriRequest"
    },
    "IdentitytoolkitRelyingpartySignOutUserRequest": {
      "id": "IdentitytoolkitRelyingpartySignOutUserRequest",
      "type": "object",
      "properties": {
        "localId": {
          "type": "string",
          "description": "The local ID of the user."
        },
        "instanceId": {
          "description": "Instance id token of the app.",
          "type": "string"
        }
      },
      "description": "Request to sign out user."
    },
    "VerifyAssertionResponse": {
      "properties": {
        "oauthExpireIn": {
          "format": "int32",
          "description": "The lifetime in seconds of the OAuth2 access token.",
          "type": "integer"
        },
        "federatedId": {
          "description": "The unique ID identifies the IdP account.",
          "type": "string"
        },
        "screenName": {
          "description": "The screen_name of a Twitter user or the login name at Github.",
          "type": "string"
        },
        "appScheme": {
          "description": "The custom scheme used by mobile app.",
          "type": "string"
        },
        "rawUserInfo": {
          "type": "string",
          "description": "Raw IDP-returned user info."
        },
        "needConfirmation": {
          "type": "boolean",
          "description": "Whether the assertion is from a non-trusted IDP and need account linking confirmation."
        },
        "oauthAccessToken": {
          "description": "The OAuth2 access token.",
          "type": "string"
        },
        "inputEmail": {
          "description": "It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.",
          "type": "string"
        },
        "oauthTokenSecret": {
          "type": "string",
          "description": "The OAuth1 access token secret."
        },
        "originalEmail": {
          "type": "string",
          "description": "The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email."
        },
        "needEmail": {
          "description": "Whether need client to supply email to complete the federated login flow.",
          "type": "boolean"
        },
        "verifiedProvider": {
          "items": {
            "type": "string"
          },
          "description": "When action is 'map', contains the idps which can be used for confirmation.",
          "type": "array"
        },
        "errorMessage": {
          "type": "string",
          "description": "Client error code."
        },
        "oauthAuthorizationCode": {
          "type": "string",
          "description": "The OAuth2 authorization code."
        },
        "timeZone": {
          "description": "The timezone of the user.",
          "type": "string"
        },
        "isNewUser": {
          "type": "boolean",
          "description": "True if it's a new user sign-in, false if it's a returning user."
        },
        "idToken": {
          "description": "The ID token.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the user.",
          "type": "string"
        },
        "action": {
          "description": "The action code.",
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The opaque value used by the client to maintain context info between the authentication request and the IDP callback."
        },
        "oauthIdToken": {
          "type": "string",
          "description": "The OIDC id token."
        },
        "language": {
          "description": "The language preference of the user.",
          "type": "string"
        },
        "emailRecycled": {
          "type": "boolean",
          "description": "It's true if the email is recycled."
        },
        "dateOfBirth": {
          "description": "The birth date of the IdP account.",
          "type": "string"
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "kind": {
          "type": "string",
          "default": "identitytoolkit#VerifyAssertionResponse",
          "description": "The fixed string \"identitytoolkit#VerifyAssertionResponse\"."
        },
        "photoUrl": {
          "description": "The URI of the public accessible profiel picture.",
          "type": "string"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "oauthRequestToken": {
          "description": "The user approved request token for the OpenID OAuth extension.",
          "type": "string"
        },
        "emailVerified": {
          "description": "The value is true if the IDP is also the email provider. It means the user owns the email.",
          "type": "boolean"
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "oauthScope": {
          "type": "string",
          "description": "The scope for the OpenID OAuth extension."
        },
        "email": {
          "type": "string",
          "description": "The email returned by the IdP. NOTE: The federated login user may not own the email."
        },
        "expiresIn": {
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "type": "string",
          "format": "int64"
        },
        "localId": {
          "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.",
          "type": "string"
        },
        "nickName": {
          "type": "string",
          "description": "The nick name of the user."
        },
        "providerId": {
          "type": "string",
          "description": "The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \"providerId\" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \"identifier\" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned."
        },
        "appInstallationUrl": {
          "description": "URL for OTA app installation.",
          "type": "string"
        },
        "fullName": {
          "description": "The full name of the user.",
          "type": "string"
        }
      },
      "id": "VerifyAssertionResponse",
      "description": "Response of verifying the IDP assertion.",
      "type": "object"
    },
    "IdpConfig": {
      "description": "Template for a single idp configuration.",
      "type": "object",
      "properties": {
        "provider": {
          "description": "OAuth2 provider.",
          "type": "string"
        },
        "enabled": {
          "description": "Whether this IDP is enabled.",
          "type": "boolean"
        },
        "clientId": {
          "type": "string",
          "description": "OAuth2 client ID."
        },
        "experimentPercent": {
          "description": "Percent of users who will be prompted/redirected federated login for this IDP.",
          "format": "int32",
          "type": "integer"
        },
        "secret": {
          "type": "string",
          "description": "OAuth2 client secret."
        },
        "whitelistedAudiences": {
          "items": {
            "type": "string"
          },
          "description": "Whitelisted client IDs for audience check.",
          "type": "array"
        }
      },
      "id": "IdpConfig"
    },
    "EmailTemplate": {
      "type": "object",
      "id": "EmailTemplate",
      "description": "Template for an email template.",
      "properties": {
        "replyTo": {
          "type": "string",
          "description": "Reply-to address."
        },
        "from": {
          "type": "string",
          "description": "From address of the email."
        },
        "format": {
          "type": "string",
          "description": "Email body format."
        },
        "subject": {
          "description": "Subject of the email.",
          "type": "string"
        },
        "body": {
          "description": "Email body.",
          "type": "string"
        },
        "fromDisplayName": {
          "type": "string",
          "description": "From display name."
        }
      }
    },
    "DeleteAccountResponse": {
      "id": "DeleteAccountResponse",
      "type": "object",
      "description": "Respone of deleting account.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The fixed string \"identitytoolkit#DeleteAccountResponse\".",
          "default": "identitytoolkit#DeleteAccountResponse"
        }
      }
    },
    "VerifyPasswordResponse": {
      "type": "object",
      "id": "VerifyPasswordResponse",
      "description": "Request of verifying the password.",
      "properties": {
        "registered": {
          "type": "boolean",
          "description": "Whether the email is registered."
        },
        "expiresIn": {
          "format": "int64",
          "description": "If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
          "type": "string"
        },
        "email": {
          "description": "The email returned by the IdP. NOTE: The federated login user may not own the email.",
          "type": "string"
        },
        "photoUrl": {
          "type": "string",
          "description": "The URI of the user's photo at IdP"
        },
        "oauthAuthorizationCode": {
          "description": "The OAuth2 authorization code.",
          "type": "string"
        },
        "localId": {
          "description": "The RP local ID if it's already been mapped to the IdP account identified by the federated ID.",
          "type": "string"
        },
        "displayName": {
          "description": "The name of the user.",
          "type": "string"
        },
        "refreshToken": {
          "type": "string",
          "description": "If idToken is STS id token, then this field will be refresh token."
        },
        "idToken": {
          "type": "string",
          "description": "The GITKit token for authenticated user."
        },
        "kind": {
          "description": "The fixed string \"identitytoolkit#VerifyPasswordResponse\".",
          "default": "identitytoolkit#VerifyPasswordResponse",
          "type": "string"
        },
        "oauthExpireIn": {
          "format": "int32",
          "description": "The lifetime in seconds of the OAuth2 access token.",
          "type": "integer"
        },
        "oauthAccessToken": {
          "description": "The OAuth2 access token.",
          "type": "string"
        }
      }
    }
  },
  "protocol": "rest",
  "description": "Help the third party sites to implement federated login.",
  "canonicalName": "Identity Toolkit",
  "basePath": "/identitytoolkit/v3/relyingparty/",
  "batchPath": "batch/identitytoolkit/v3",
  "servicePath": "identitytoolkit/v3/relyingparty/",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "name": "identitytoolkit",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/firebase": {
          "description": "View and administer all your Firebase data and settings"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "baseUrl": "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
  "kind": "discovery#restDescription",
  "parameters": {
    "quotaUser": {
      "type": "string",
      "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.",
      "location": "query"
    },
    "userIp": {
      "location": "query",
      "type": "string",
      "description": "Deprecated. Please use quotaUser instead."
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "alt": {
      "enum": [
        "json"
      ],
      "type": "string",
      "description": "Data format for the response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "default": "json",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    }
  }
}
